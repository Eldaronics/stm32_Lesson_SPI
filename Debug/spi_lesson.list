
spi_lesson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000148  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001b8  200001b8  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000bf9d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e32  00000000  00000000  0002c03d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000670  00000000  00000000  0002de70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007f8  00000000  00000000  0002e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000037bd  00000000  00000000  0002ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000028a8  00000000  00000000  00032495  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00034d3d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000017f0  00000000  00000000  00034dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00002ef3  00000000  00000000  000365ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c3c 	.word	0x08002c3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002c3c 	.word	0x08002c3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint16_t __dwt_divider = 0;
uint8_t __dwt_init = 0;
uint32_t DWT_Delay_Init(void) {
 8000580:	b538      	push	{r3, r4, r5, lr}
	__dwt_init = 1;
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <DWT_Delay_Init+0x64>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
	__dwt_divider = (uint16_t)(HAL_RCC_GetHCLKFreq() / 1000000);
 8000588:	f001 f95a 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <DWT_Delay_Init+0x68>)
 800058e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <DWT_Delay_Init+0x6c>)
 8000594:	8018      	strh	r0, [r3, #0]
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <DWT_Delay_Init+0x70>)
 8000598:	68da      	ldr	r2, [r3, #12]
 800059a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800059e:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80005a6:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <DWT_Delay_Init+0x74>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	f022 0201 	bic.w	r2, r2, #1
 80005b0:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005b2:	681a      	ldr	r2, [r3, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80005b4:	2000      	movs	r0, #0
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005b6:	f042 0201 	orr.w	r2, r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
  DWT->CYCCNT = 0;
 80005bc:	6058      	str	r0, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80005be:	bf00      	nop
     __ASM volatile ("NOP");
 80005c0:	bf00      	nop
  __ASM volatile ("NOP");
 80005c2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	b95b      	cbnz	r3, 80005e0 <DWT_Delay_Init+0x60>
     }
     else
  {
    while(1){
    	//TODO 0,add error led here in future
    	printf("ERROR =>Line %d, File %s\n",__LINE__,__FILE__);
 80005c8:	4d0b      	ldr	r5, [pc, #44]	; (80005f8 <DWT_Delay_Init+0x78>)
 80005ca:	4c0c      	ldr	r4, [pc, #48]	; (80005fc <DWT_Delay_Init+0x7c>)
 80005cc:	462a      	mov	r2, r5
 80005ce:	2129      	movs	r1, #41	; 0x29
 80005d0:	4620      	mov	r0, r4
 80005d2:	f001 fbd7 	bl	8001d84 <iprintf>
		HAL_Delay(500);
 80005d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005da:	f000 fd45 	bl	8001068 <HAL_Delay>
 80005de:	e7f5      	b.n	80005cc <DWT_Delay_Init+0x4c>
    }
    return 1; /*clock cycle counter not started*/
  }
}
 80005e0:	bd38      	pop	{r3, r4, r5, pc}
 80005e2:	bf00      	nop
 80005e4:	2000008e 	.word	0x2000008e
 80005e8:	000f4240 	.word	0x000f4240
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	e000edf0 	.word	0xe000edf0
 80005f4:	e0001000 	.word	0xe0001000
 80005f8:	08002c54 	.word	0x08002c54
 80005fc:	08002c66 	.word	0x08002c66

08000600 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000604:	2230      	movs	r2, #48	; 0x30
 8000606:	2100      	movs	r1, #0
 8000608:	a808      	add	r0, sp, #32
 800060a:	f001 fbb3 	bl	8001d74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060e:	2100      	movs	r1, #0
 8000610:	2214      	movs	r2, #20
 8000612:	a803      	add	r0, sp, #12
 8000614:	f001 fbae 	bl	8001d74 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2400      	movs	r4, #0
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <SystemClock_Config+0xa0>)
 800061c:	9401      	str	r4, [sp, #4]
 800061e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000620:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000624:	641a      	str	r2, [r3, #64]	; 0x40
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <SystemClock_Config+0xa4>)
 8000632:	9402      	str	r4, [sp, #8]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	9b02      	ldr	r3, [sp, #8]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000646:	2303      	movs	r3, #3
 8000648:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064e:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 168;
 800065e:	22a8      	movs	r2, #168	; 0xa8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000666:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800066a:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	9512      	str	r5, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f000 fe50 	bl	8001314 <HAL_RCC_OscConfig>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	9303      	str	r3, [sp, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067c:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067e:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000684:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000686:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068c:	f001 f83e 	bl	800170c <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000690:	4622      	mov	r2, r4
 8000692:	4621      	mov	r1, r4
 8000694:	4620      	mov	r0, r4
 8000696:	f000 ffbf 	bl	8001618 <HAL_RCC_MCOConfig>
}
 800069a:	b015      	add	sp, #84	; 0x54
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <main>:
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
	HAL_Init();
 80006ac:	f000 fcb0 	bl	8001010 <HAL_Init>
	SystemClock_Config();
 80006b0:	f7ff ffa6 	bl	8000600 <SystemClock_Config>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	2214      	movs	r2, #20
 80006b6:	2100      	movs	r1, #0
 80006b8:	eb0d 0002 	add.w	r0, sp, r2
 80006bc:	f001 fb5a 	bl	8001d74 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006c0:	2400      	movs	r4, #0
 80006c2:	4b44      	ldr	r3, [pc, #272]	; (80007d4 <main+0x12c>)
 80006c4:	9401      	str	r4, [sp, #4]
 80006c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CE2_Pin|CSN2_Pin, GPIO_PIN_RESET);
 80006c8:	4843      	ldr	r0, [pc, #268]	; (80007d8 <main+0x130>)
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
 80006d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	9402      	str	r4, [sp, #8]
 80006dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006de:	f042 0204 	orr.w	r2, r2, #4
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30
 80006e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e6:	f002 0204 	and.w	r2, r2, #4
 80006ea:	9202      	str	r2, [sp, #8]
 80006ec:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	9403      	str	r4, [sp, #12]
 80006f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f2:	f042 0201 	orr.w	r2, r2, #1
 80006f6:	631a      	str	r2, [r3, #48]	; 0x30
 80006f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fa:	f002 0201 	and.w	r2, r2, #1
 80006fe:	9203      	str	r2, [sp, #12]
 8000700:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	9404      	str	r4, [sp, #16]
 8000704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000706:	f042 0202 	orr.w	r2, r2, #2
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC, CE2_Pin|CSN2_Pin, GPIO_PIN_RESET);
 8000714:	4622      	mov	r2, r4
 8000716:	2103      	movs	r1, #3
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC, CE2_Pin|CSN2_Pin, GPIO_PIN_RESET);
 800071a:	f000 fdf5 	bl	8001308 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CE1_Pin|CSN1_Pin, GPIO_PIN_RESET);
 800071e:	4622      	mov	r2, r4
 8000720:	2118      	movs	r1, #24
 8000722:	482e      	ldr	r0, [pc, #184]	; (80007dc <main+0x134>)
 8000724:	f000 fdf0 	bl	8001308 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CE2_Pin CSN2_Pin */
	GPIO_InitStruct.Pin = CE2_Pin|CSN2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2501      	movs	r5, #1
	GPIO_InitStruct.Pin = CE2_Pin|CSN2_Pin;
 800072a:	2303      	movs	r3, #3
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	a905      	add	r1, sp, #20
 800072e:	482a      	ldr	r0, [pc, #168]	; (80007d8 <main+0x130>)
	GPIO_InitStruct.Pin = CE2_Pin|CSN2_Pin;
 8000730:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000738:	f000 fd06 	bl	8001148 <HAL_GPIO_Init>

	/*Configure GPIO pins : CE1_Pin CSN1_Pin */
	GPIO_InitStruct.Pin = CE1_Pin|CSN1_Pin;
 800073c:	2318      	movs	r3, #24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	a905      	add	r1, sp, #20
 8000740:	4826      	ldr	r0, [pc, #152]	; (80007dc <main+0x134>)
	GPIO_InitStruct.Pin = CE1_Pin|CSN1_Pin;
 8000742:	9305      	str	r3, [sp, #20]

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2602      	movs	r6, #2
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f000 fcfc 	bl	8001148 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	4821      	ldr	r0, [pc, #132]	; (80007dc <main+0x134>)
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000758:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000760:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f000 fcf1 	bl	8001148 <HAL_GPIO_Init>
	hspi1.Instance = SPI1;
 8000766:	481e      	ldr	r0, [pc, #120]	; (80007e0 <main+0x138>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <main+0x13c>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	6084      	str	r4, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800076c:	f44f 7982 	mov.w	r9, #260	; 0x104
 8000770:	e880 0208 	stmia.w	r0, {r3, r9}
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000774:	f44f 7800 	mov.w	r8, #512	; 0x200
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000778:	2338      	movs	r3, #56	; 0x38
	hspi1.Init.CRCPolynomial = 10;
 800077a:	270a      	movs	r7, #10
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800077c:	61c3      	str	r3, [r0, #28]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800077e:	60c4      	str	r4, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000780:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000782:	6144      	str	r4, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000784:	f8c0 8018 	str.w	r8, [r0, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	6204      	str	r4, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078a:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800078e:	62c7      	str	r7, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	f001 f8c6 	bl	8001920 <HAL_SPI_Init>
	hspi2.Instance = SPI2;
 8000794:	4814      	ldr	r0, [pc, #80]	; (80007e8 <main+0x140>)
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <main+0x144>)
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000798:	6084      	str	r4, [r0, #8]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800079a:	e880 0208 	stmia.w	r0, {r3, r9}
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800079e:	2330      	movs	r3, #48	; 0x30
 80007a0:	61c3      	str	r3, [r0, #28]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a2:	60c4      	str	r4, [r0, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a4:	6104      	str	r4, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a6:	6144      	str	r4, [r0, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80007a8:	f8c0 8018 	str.w	r8, [r0, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	6204      	str	r4, [r0, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	6244      	str	r4, [r0, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b0:	6284      	str	r4, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80007b2:	62c7      	str	r7, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007b4:	f001 f8b4 	bl	8001920 <HAL_SPI_Init>
	init(nrf1);
 80007b8:	4628      	mov	r0, r5
 80007ba:	f000 f9b7 	bl	8000b2c <init>
	init(nrf2);
 80007be:	4630      	mov	r0, r6
 80007c0:	f000 f9b4 	bl	8000b2c <init>
		getFIFO_Status(nrf1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f000 fa95 	bl	8000cf4 <getFIFO_Status>
		starTransmission(nrf1,19);
 80007ca:	2113      	movs	r1, #19
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 fa41 	bl	8000c54 <starTransmission>
 80007d2:	e7f7      	b.n	80007c4 <main+0x11c>
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	20000150 	.word	0x20000150
 80007e4:	40013000 	.word	0x40013000
 80007e8:	2000009c 	.word	0x2000009c
 80007ec:	40003800 	.word	0x40003800

080007f0 <readRegister>:
#include "string.h"
#include "DWT.h"
extern SPI_HandleTypeDef hspi1;
extern SPI_HandleTypeDef hspi2;

uint8_t readRegister(uint8_t nrf,uint8_t readReg){
 80007f0:	b510      	push	{r4, lr}
 80007f2:	b086      	sub	sp, #24
	uint8_t receiveData = 0;
 80007f4:	2200      	movs	r2, #0
	switch(nrf){
 80007f6:	2801      	cmp	r0, #1
uint8_t readRegister(uint8_t nrf,uint8_t readReg){
 80007f8:	4604      	mov	r4, r0
 80007fa:	f88d 100f 	strb.w	r1, [sp, #15]
	uint8_t receiveData = 0;
 80007fe:	f88d 2017 	strb.w	r2, [sp, #23]
	switch(nrf){
 8000802:	d005      	beq.n	8000810 <readRegister+0x20>
 8000804:	2802      	cmp	r0, #2
 8000806:	d01e      	beq.n	8000846 <readRegister+0x56>
		HAL_SPI_TransmitReceive(&hspi2,&readReg,&receiveData,1,100);
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
		break;
	}
	return receiveData;
}
 8000808:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800080c:	b006      	add	sp, #24
 800080e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,0);
 8000810:	2110      	movs	r1, #16
 8000812:	4819      	ldr	r0, [pc, #100]	; (8000878 <readRegister+0x88>)
 8000814:	f000 fd78 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&readReg,1,100);
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	4622      	mov	r2, r4
 800081c:	f10d 010f 	add.w	r1, sp, #15
 8000820:	4816      	ldr	r0, [pc, #88]	; (800087c <readRegister+0x8c>)
 8000822:	f001 f8ba 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1,&readReg,&receiveData,1,100);
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	f10d 0217 	add.w	r2, sp, #23
 800082e:	f10d 010f 	add.w	r1, sp, #15
 8000832:	4623      	mov	r3, r4
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <readRegister+0x8c>)
 8000836:	f001 f958 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,1);
 800083a:	480f      	ldr	r0, [pc, #60]	; (8000878 <readRegister+0x88>)
 800083c:	4622      	mov	r2, r4
 800083e:	2110      	movs	r1, #16
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 8000840:	f000 fd62 	bl	8001308 <HAL_GPIO_WritePin>
		break;
 8000844:	e7e0      	b.n	8000808 <readRegister+0x18>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,0);
 8000846:	4601      	mov	r1, r0
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <readRegister+0x90>)
 800084a:	f000 fd5d 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2,&readReg,1,100);
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	f10d 010f 	add.w	r1, sp, #15
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <readRegister+0x94>)
 8000858:	f001 f89f 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi2,&readReg,&receiveData,1,100);
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	f10d 0217 	add.w	r2, sp, #23
 8000864:	f10d 010f 	add.w	r1, sp, #15
 8000868:	2301      	movs	r3, #1
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <readRegister+0x94>)
 800086c:	f001 f93d 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 8000870:	2201      	movs	r2, #1
 8000872:	4621      	mov	r1, r4
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <readRegister+0x90>)
 8000876:	e7e3      	b.n	8000840 <readRegister+0x50>
 8000878:	40020000 	.word	0x40020000
 800087c:	20000150 	.word	0x20000150
 8000880:	40020800 	.word	0x40020800
 8000884:	2000009c 	.word	0x2000009c

08000888 <writeRegister>:

uint8_t writeRegister(uint8_t nrf,uint8_t writeReg,uint8_t writeData){
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	b086      	sub	sp, #24

	uint8_t writtenData = 0;
 800088c:	2600      	movs	r6, #0
	//	uint8_t convertedIn = (W_REGISTER | writeReg);
	uint8_t convertedIn = (W_REGISTER | writeReg);
 800088e:	f041 0120 	orr.w	r1, r1, #32
	switch(nrf){
 8000892:	2801      	cmp	r0, #1
uint8_t writeRegister(uint8_t nrf,uint8_t writeReg,uint8_t writeData){
 8000894:	4604      	mov	r4, r0
 8000896:	f88d 200f 	strb.w	r2, [sp, #15]
	uint8_t writtenData = 0;
 800089a:	f88d 6016 	strb.w	r6, [sp, #22]
	uint8_t convertedIn = (W_REGISTER | writeReg);
 800089e:	f88d 1017 	strb.w	r1, [sp, #23]
	switch(nrf){
 80008a2:	d005      	beq.n	80008b0 <writeRegister+0x28>
 80008a4:	2802      	cmp	r0, #2
 80008a6:	d059      	beq.n	800095c <writeRegister+0xd4>
		HAL_SPI_TransmitReceive(&hspi2,&writeData,&writtenData,1,100);
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
		break;
	}
	return writtenData;
}
 80008a8:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80008ac:	b006      	add	sp, #24
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,0);
 80008b0:	4632      	mov	r2, r6
 80008b2:	2110      	movs	r1, #16
 80008b4:	4853      	ldr	r0, [pc, #332]	; (8000a04 <writeRegister+0x17c>)
 80008b6:	f000 fd27 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&convertedIn,1,100);
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	4622      	mov	r2, r4
 80008be:	f10d 0117 	add.w	r1, sp, #23
 80008c2:	4851      	ldr	r0, [pc, #324]	; (8000a08 <writeRegister+0x180>)
		HAL_SPI_TransmitReceive(&hspi1,&writeData,&writtenData,1,100);
 80008c4:	2564      	movs	r5, #100	; 0x64
		HAL_SPI_Transmit(&hspi1,&convertedIn,1,100);
 80008c6:	f001 f868 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,&convertedIn,1,100);
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	4622      	mov	r2, r4
 80008ce:	f10d 0117 	add.w	r1, sp, #23
 80008d2:	484d      	ldr	r0, [pc, #308]	; (8000a08 <writeRegister+0x180>)
 80008d4:	f001 f861 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1,&writeData,&writtenData,1,100);
 80008d8:	4623      	mov	r3, r4
 80008da:	f10d 0216 	add.w	r2, sp, #22
 80008de:	f10d 010f 	add.w	r1, sp, #15
 80008e2:	9500      	str	r5, [sp, #0]
 80008e4:	4848      	ldr	r0, [pc, #288]	; (8000a08 <writeRegister+0x180>)
 80008e6:	f001 f900 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&hspi1,&writeData,&writtenData,1,100);
 80008ea:	4623      	mov	r3, r4
 80008ec:	f10d 0216 	add.w	r2, sp, #22
 80008f0:	f10d 010f 	add.w	r1, sp, #15
 80008f4:	9500      	str	r5, [sp, #0]
 80008f6:	4844      	ldr	r0, [pc, #272]	; (8000a08 <writeRegister+0x180>)
 80008f8:	f001 f8f7 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,1);
 80008fc:	4622      	mov	r2, r4
 80008fe:	2110      	movs	r1, #16
 8000900:	4840      	ldr	r0, [pc, #256]	; (8000a04 <writeRegister+0x17c>)
 8000902:	f000 fd01 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,0);
 8000906:	4632      	mov	r2, r6
 8000908:	2110      	movs	r1, #16
 800090a:	483e      	ldr	r0, [pc, #248]	; (8000a04 <writeRegister+0x17c>)
 800090c:	f000 fcfc 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&convertedIn,1,100);
 8000910:	462b      	mov	r3, r5
 8000912:	4622      	mov	r2, r4
 8000914:	f10d 0117 	add.w	r1, sp, #23
 8000918:	483b      	ldr	r0, [pc, #236]	; (8000a08 <writeRegister+0x180>)
 800091a:	f001 f83e 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,&convertedIn,1,100);
 800091e:	462b      	mov	r3, r5
 8000920:	4622      	mov	r2, r4
 8000922:	f10d 0117 	add.w	r1, sp, #23
 8000926:	4838      	ldr	r0, [pc, #224]	; (8000a08 <writeRegister+0x180>)
 8000928:	f001 f837 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1,&writeData,&writtenData,1,100);
 800092c:	4623      	mov	r3, r4
 800092e:	f10d 0216 	add.w	r2, sp, #22
 8000932:	f10d 010f 	add.w	r1, sp, #15
 8000936:	9500      	str	r5, [sp, #0]
 8000938:	4833      	ldr	r0, [pc, #204]	; (8000a08 <writeRegister+0x180>)
 800093a:	f001 f8d6 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&hspi1,&writeData,&writtenData,1,100);
 800093e:	f10d 0216 	add.w	r2, sp, #22
 8000942:	f10d 010f 	add.w	r1, sp, #15
 8000946:	9500      	str	r5, [sp, #0]
 8000948:	4623      	mov	r3, r4
 800094a:	482f      	ldr	r0, [pc, #188]	; (8000a08 <writeRegister+0x180>)
 800094c:	f001 f8cd 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,1);
 8000950:	482c      	ldr	r0, [pc, #176]	; (8000a04 <writeRegister+0x17c>)
 8000952:	4622      	mov	r2, r4
 8000954:	2110      	movs	r1, #16
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 8000956:	f000 fcd7 	bl	8001308 <HAL_GPIO_WritePin>
		break;
 800095a:	e7a5      	b.n	80008a8 <writeRegister+0x20>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,0);
 800095c:	4601      	mov	r1, r0
 800095e:	4632      	mov	r2, r6
 8000960:	482a      	ldr	r0, [pc, #168]	; (8000a0c <writeRegister+0x184>)
 8000962:	f000 fcd1 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2,&convertedIn,1,100);
 8000966:	2364      	movs	r3, #100	; 0x64
 8000968:	2201      	movs	r2, #1
 800096a:	f10d 0117 	add.w	r1, sp, #23
 800096e:	4828      	ldr	r0, [pc, #160]	; (8000a10 <writeRegister+0x188>)
		HAL_SPI_TransmitReceive(&hspi2,&writeData,&writtenData,1,100);
 8000970:	2564      	movs	r5, #100	; 0x64
		HAL_SPI_Transmit(&hspi2,&convertedIn,1,100);
 8000972:	f001 f812 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2,&convertedIn,1,100);
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	2201      	movs	r2, #1
 800097a:	f10d 0117 	add.w	r1, sp, #23
 800097e:	4824      	ldr	r0, [pc, #144]	; (8000a10 <writeRegister+0x188>)
 8000980:	f001 f80b 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi2,&writeData,&writtenData,1,100);
 8000984:	2301      	movs	r3, #1
 8000986:	f10d 0216 	add.w	r2, sp, #22
 800098a:	f10d 010f 	add.w	r1, sp, #15
 800098e:	9500      	str	r5, [sp, #0]
 8000990:	481f      	ldr	r0, [pc, #124]	; (8000a10 <writeRegister+0x188>)
 8000992:	f001 f8aa 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&hspi2,&writeData,&writtenData,1,100);
 8000996:	2301      	movs	r3, #1
 8000998:	f10d 0216 	add.w	r2, sp, #22
 800099c:	f10d 010f 	add.w	r1, sp, #15
 80009a0:	9500      	str	r5, [sp, #0]
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <writeRegister+0x188>)
 80009a4:	f001 f8a1 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	4621      	mov	r1, r4
 80009ac:	4817      	ldr	r0, [pc, #92]	; (8000a0c <writeRegister+0x184>)
 80009ae:	f000 fcab 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,0);
 80009b2:	4632      	mov	r2, r6
 80009b4:	4621      	mov	r1, r4
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <writeRegister+0x184>)
 80009b8:	f000 fca6 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2,&convertedIn,1,100);
 80009bc:	462b      	mov	r3, r5
 80009be:	2201      	movs	r2, #1
 80009c0:	f10d 0117 	add.w	r1, sp, #23
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <writeRegister+0x188>)
 80009c6:	f000 ffe8 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2,&convertedIn,1,100);
 80009ca:	462b      	mov	r3, r5
 80009cc:	2201      	movs	r2, #1
 80009ce:	f10d 0117 	add.w	r1, sp, #23
 80009d2:	480f      	ldr	r0, [pc, #60]	; (8000a10 <writeRegister+0x188>)
 80009d4:	f000 ffe1 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi2,&writeData,&writtenData,1,100);
 80009d8:	2301      	movs	r3, #1
 80009da:	f10d 0216 	add.w	r2, sp, #22
 80009de:	f10d 010f 	add.w	r1, sp, #15
 80009e2:	9500      	str	r5, [sp, #0]
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <writeRegister+0x188>)
 80009e6:	f001 f880 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_SPI_TransmitReceive(&hspi2,&writeData,&writtenData,1,100);
 80009ea:	f10d 0216 	add.w	r2, sp, #22
 80009ee:	f10d 010f 	add.w	r1, sp, #15
 80009f2:	9500      	str	r5, [sp, #0]
 80009f4:	2301      	movs	r3, #1
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <writeRegister+0x188>)
 80009f8:	f001 f877 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	4621      	mov	r1, r4
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <writeRegister+0x184>)
 8000a02:	e7a8      	b.n	8000956 <writeRegister+0xce>
 8000a04:	40020000 	.word	0x40020000
 8000a08:	20000150 	.word	0x20000150
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	2000009c 	.word	0x2000009c

08000a14 <flushRx>:
		flushRx(nrf2);
		flushTx(nrf2);
	}
	return 0;
}
uint8_t flushRx(uint8_t nrf){
 8000a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t result = 0;
	switch(nrf){
 8000a16:	2801      	cmp	r0, #1
	uint8_t result = 0;
 8000a18:	f04f 0200 	mov.w	r2, #0
uint8_t flushRx(uint8_t nrf){
 8000a1c:	4604      	mov	r4, r0
	uint8_t result = 0;
 8000a1e:	f88d 200f 	strb.w	r2, [sp, #15]
	switch(nrf){
 8000a22:	d005      	beq.n	8000a30 <flushRx+0x1c>
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d01c      	beq.n	8000a62 <flushRx+0x4e>
		HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)FLUSH_RX,&result,1,100);
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
		break;
	}
	return result;
}
 8000a28:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000a2c:	b004      	add	sp, #16
 8000a2e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,0);
 8000a30:	2110      	movs	r1, #16
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <flushRx+0x7c>)
 8000a34:	f000 fc68 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t*)FLUSH_RX,1,100);
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	4622      	mov	r2, r4
 8000a3c:	21e2      	movs	r1, #226	; 0xe2
 8000a3e:	4815      	ldr	r0, [pc, #84]	; (8000a94 <flushRx+0x80>)
 8000a40:	f000 ffab 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)FLUSH_RX,&result,1,100);
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	f10d 020f 	add.w	r2, sp, #15
 8000a4c:	21e2      	movs	r1, #226	; 0xe2
 8000a4e:	4623      	mov	r3, r4
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <flushRx+0x80>)
 8000a52:	f001 f84a 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,1);
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <flushRx+0x7c>)
 8000a58:	4622      	mov	r2, r4
 8000a5a:	2110      	movs	r1, #16
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 8000a5c:	f000 fc54 	bl	8001308 <HAL_GPIO_WritePin>
		break;
 8000a60:	e7e2      	b.n	8000a28 <flushRx+0x14>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,0);
 8000a62:	4601      	mov	r1, r0
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <flushRx+0x84>)
 8000a66:	f000 fc4f 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2,(uint8_t*)FLUSH_RX,1,100);
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	21e2      	movs	r1, #226	; 0xe2
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <flushRx+0x88>)
 8000a72:	f000 ff92 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)FLUSH_RX,&result,1,100);
 8000a76:	2364      	movs	r3, #100	; 0x64
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	f10d 020f 	add.w	r2, sp, #15
 8000a7e:	21e2      	movs	r1, #226	; 0xe2
 8000a80:	2301      	movs	r3, #1
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <flushRx+0x88>)
 8000a84:	f001 f831 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4621      	mov	r1, r4
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <flushRx+0x84>)
 8000a8e:	e7e5      	b.n	8000a5c <flushRx+0x48>
 8000a90:	40020000 	.word	0x40020000
 8000a94:	20000150 	.word	0x20000150
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	2000009c 	.word	0x2000009c

08000aa0 <flushTx>:
uint8_t flushTx(uint8_t nrf){
 8000aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t result = 0;
	switch(nrf){
 8000aa2:	2801      	cmp	r0, #1
	uint8_t result = 0;
 8000aa4:	f04f 0200 	mov.w	r2, #0
uint8_t flushTx(uint8_t nrf){
 8000aa8:	4604      	mov	r4, r0
	uint8_t result = 0;
 8000aaa:	f88d 200f 	strb.w	r2, [sp, #15]
	switch(nrf){
 8000aae:	d005      	beq.n	8000abc <flushTx+0x1c>
 8000ab0:	2802      	cmp	r0, #2
 8000ab2:	d01c      	beq.n	8000aee <flushTx+0x4e>
		HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)FLUSH_TX,&result,1,100);
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
		break;
	}
	return result;
}
 8000ab4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000ab8:	b004      	add	sp, #16
 8000aba:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,0);
 8000abc:	2110      	movs	r1, #16
 8000abe:	4817      	ldr	r0, [pc, #92]	; (8000b1c <flushTx+0x7c>)
 8000ac0:	f000 fc22 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t*)FLUSH_TX,1,100);
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	4622      	mov	r2, r4
 8000ac8:	21e1      	movs	r1, #225	; 0xe1
 8000aca:	4815      	ldr	r0, [pc, #84]	; (8000b20 <flushTx+0x80>)
 8000acc:	f000 ff65 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)FLUSH_TX,&result,1,100);
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f10d 020f 	add.w	r2, sp, #15
 8000ad8:	21e1      	movs	r1, #225	; 0xe1
 8000ada:	4623      	mov	r3, r4
 8000adc:	4810      	ldr	r0, [pc, #64]	; (8000b20 <flushTx+0x80>)
 8000ade:	f001 f804 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,1);
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <flushTx+0x7c>)
 8000ae4:	4622      	mov	r2, r4
 8000ae6:	2110      	movs	r1, #16
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 8000ae8:	f000 fc0e 	bl	8001308 <HAL_GPIO_WritePin>
		break;
 8000aec:	e7e2      	b.n	8000ab4 <flushTx+0x14>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,0);
 8000aee:	4601      	mov	r1, r0
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <flushTx+0x84>)
 8000af2:	f000 fc09 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2,(uint8_t*)FLUSH_TX,1,100);
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2201      	movs	r2, #1
 8000afa:	21e1      	movs	r1, #225	; 0xe1
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <flushTx+0x88>)
 8000afe:	f000 ff4c 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)FLUSH_TX,&result,1,100);
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	f10d 020f 	add.w	r2, sp, #15
 8000b0a:	21e1      	movs	r1, #225	; 0xe1
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <flushTx+0x88>)
 8000b10:	f000 ffeb 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	4621      	mov	r1, r4
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <flushTx+0x84>)
 8000b1a:	e7e5      	b.n	8000ae8 <flushTx+0x48>
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	20000150 	.word	0x20000150
 8000b24:	40020800 	.word	0x40020800
 8000b28:	2000009c 	.word	0x2000009c

08000b2c <init>:
	switch(nrf){
 8000b2c:	2801      	cmp	r0, #1
uint8_t init(uint8_t nrf){
 8000b2e:	b510      	push	{r4, lr}
 8000b30:	4604      	mov	r4, r0
	switch(nrf){
 8000b32:	d003      	beq.n	8000b3c <init+0x10>
 8000b34:	2802      	cmp	r0, #2
 8000b36:	d02f      	beq.n	8000b98 <init+0x6c>
}
 8000b38:	2000      	movs	r0, #0
 8000b3a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,1);
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <init+0xcc>)
 8000b42:	f000 fbe1 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE1_GPIO_Port,CE1_Pin,0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2108      	movs	r1, #8
 8000b4a:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <init+0xcc>)
 8000b4c:	f000 fbdc 	bl	8001308 <HAL_GPIO_WritePin>
		writeRegister(nrf1,SETUP_RETR,(0b0100<<ARD)|(0b1111<<ARC));//Auto Re-transmit delay set for 1500 us;Auto Retransmit Count set for 15 tries
 8000b50:	224f      	movs	r2, #79	; 0x4f
 8000b52:	2104      	movs	r1, #4
 8000b54:	4620      	mov	r0, r4
 8000b56:	f7ff fe97 	bl	8000888 <writeRegister>
		writeRegister(nrf1,RF_SETUP,((_BV(RF_PWR_LOW)| _BV(RF_PWR_HIGH)) & ~_BV(RF_DR)));//RF Output power set to 0 dBm,data rate set to 1Mbps
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f7ff fe92 	bl	8000888 <writeRegister>
		writeRegister(nrf1,CONFIG,_BV(EN_CRC) | _BV(CRCO)); //set crc mode to 16 bits
 8000b64:	220c      	movs	r2, #12
 8000b66:	2100      	movs	r1, #0
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff fe8d 	bl	8000888 <writeRegister>
		writeRegister(nrf1,DYNPD,0);//disable dynamic payloads
 8000b6e:	2200      	movs	r2, #0
 8000b70:	211c      	movs	r1, #28
 8000b72:	4620      	mov	r0, r4
 8000b74:	f7ff fe88 	bl	8000888 <writeRegister>
		writeRegister(nrf1,STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT)); //set corresponding interrupts
 8000b78:	2270      	movs	r2, #112	; 0x70
 8000b7a:	2107      	movs	r1, #7
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f7ff fe83 	bl	8000888 <writeRegister>
		writeRegister(nrf1,RF_CH,42); //set channel
 8000b82:	222a      	movs	r2, #42	; 0x2a
 8000b84:	2105      	movs	r1, #5
 8000b86:	4620      	mov	r0, r4
 8000b88:	f7ff fe7e 	bl	8000888 <writeRegister>
		flushRx(nrf1);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff ff41 	bl	8000a14 <flushRx>
		flushTx(nrf1);
 8000b92:	4620      	mov	r0, r4
 8000b94:	f7ff ff84 	bl	8000aa0 <flushTx>
		HAL_GPIO_WritePin(CSN2_GPIO_Port,CSN2_Pin,1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4817      	ldr	r0, [pc, #92]	; (8000bfc <init+0xd0>)
 8000b9e:	f000 fbb3 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE2_GPIO_Port,CE2_Pin,0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4815      	ldr	r0, [pc, #84]	; (8000bfc <init+0xd0>)
 8000ba8:	f000 fbae 	bl	8001308 <HAL_GPIO_WritePin>
		writeRegister(nrf2,SETUP_RETR,(0b0100<<ARD)|(0b1111<<ARC));//Auto Re-transmit delay set for 1500 us;Auto Retransmit Count set for 15 tries
 8000bac:	224f      	movs	r2, #79	; 0x4f
 8000bae:	2104      	movs	r1, #4
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f7ff fe69 	bl	8000888 <writeRegister>
		writeRegister(nrf2,RF_SETUP,((_BV(RF_PWR_LOW)| _BV(RF_PWR_HIGH)) & ~_BV(RF_DR)));//RF Output power set to 0 dBm
 8000bb6:	2206      	movs	r2, #6
 8000bb8:	4611      	mov	r1, r2
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff fe64 	bl	8000888 <writeRegister>
		writeRegister(nrf2,CONFIG,_BV(EN_CRC) | _BV(CRCO)); //set crc mode to 16 bits
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fe5f 	bl	8000888 <writeRegister>
		writeRegister(nrf2,DYNPD,0);//disable dynamic payloads
 8000bca:	2200      	movs	r2, #0
 8000bcc:	211c      	movs	r1, #28
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f7ff fe5a 	bl	8000888 <writeRegister>
		writeRegister(nrf2,STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT)); //set corresponding interrupts
 8000bd4:	2270      	movs	r2, #112	; 0x70
 8000bd6:	2107      	movs	r1, #7
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f7ff fe55 	bl	8000888 <writeRegister>
		writeRegister(nrf2,RF_CH,42); //set channel
 8000bde:	222a      	movs	r2, #42	; 0x2a
 8000be0:	2105      	movs	r1, #5
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff fe50 	bl	8000888 <writeRegister>
		flushRx(nrf2);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff ff13 	bl	8000a14 <flushRx>
		flushTx(nrf2);
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f7ff ff56 	bl	8000aa0 <flushTx>
 8000bf4:	e7a0      	b.n	8000b38 <init+0xc>
 8000bf6:	bf00      	nop
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020800 	.word	0x40020800

08000c00 <writePayload>:
		//	case nrf2:
		//		break;
	}
	return 0;
}
uint8_t writePayload(uint8_t nrf,uint8_t data){
 8000c00:	b510      	push	{r4, lr}
 8000c02:	b086      	sub	sp, #24
	uint8_t status = 0;
 8000c04:	2200      	movs	r2, #0
	switch(nrf){
 8000c06:	2801      	cmp	r0, #1
uint8_t writePayload(uint8_t nrf,uint8_t data){
 8000c08:	4604      	mov	r4, r0
 8000c0a:	f88d 100f 	strb.w	r1, [sp, #15]
	uint8_t status = 0;
 8000c0e:	f88d 2017 	strb.w	r2, [sp, #23]
	switch(nrf){
 8000c12:	d117      	bne.n	8000c44 <writePayload+0x44>
	case nrf1:
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,0);
 8000c14:	2110      	movs	r1, #16
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <writePayload+0x4c>)
 8000c18:	f000 fb76 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t*)W_TX_PAYLOAD,100,1);
 8000c1c:	4623      	mov	r3, r4
 8000c1e:	2264      	movs	r2, #100	; 0x64
 8000c20:	21a0      	movs	r1, #160	; 0xa0
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <writePayload+0x50>)
 8000c24:	f000 feb9 	bl	800199a <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(&hspi1,&status,&data,100,1);
 8000c28:	f10d 020f 	add.w	r2, sp, #15
 8000c2c:	f10d 0117 	add.w	r1, sp, #23
 8000c30:	9400      	str	r4, [sp, #0]
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <writePayload+0x50>)
 8000c36:	f000 ff58 	bl	8001aea <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(CSN1_GPIO_Port,CSN1_Pin,1);
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	2110      	movs	r1, #16
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <writePayload+0x4c>)
 8000c40:	f000 fb62 	bl	8001308 <HAL_GPIO_WritePin>
		break;
		//	case nrf2:
		//		break;
	}
	return status;
}
 8000c44:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000c48:	b006      	add	sp, #24
 8000c4a:	bd10      	pop	{r4, pc}
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	20000150 	.word	0x20000150

08000c54 <starTransmission>:
	switch(nrf){
 8000c54:	2801      	cmp	r0, #1
uint8_t starTransmission(uint8_t nrf,uint8_t data){
 8000c56:	b538      	push	{r3, r4, r5, lr}
 8000c58:	460d      	mov	r5, r1
	switch(nrf){
 8000c5a:	d124      	bne.n	8000ca6 <starTransmission+0x52>
		writeRegister(nrf1,CONFIG,(CONFIG | _BV(PWR_UP)) & ~_BV(PRIM_RX)); //power up nrf device set it to PTX mode
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f7ff fe12 	bl	8000888 <writeRegister>
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void delay_us(volatile uint32_t microseconds)
{
	if(!__dwt_init){
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <starTransmission+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2496      	movs	r4, #150	; 0x96
 8000c6a:	b90b      	cbnz	r3, 8000c70 <starTransmission+0x1c>
		DWT_Delay_Init();
 8000c6c:	f7ff fc88 	bl	8000580 <DWT_Delay_Init>
	}

  uint32_t clk_cycle_start = DWT->CYCCNT;

  /* Go to number of cycles for system */
  microseconds *= __dwt_divider;
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <starTransmission+0x5c>)
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <starTransmission+0x60>)
  microseconds *= __dwt_divider;
 8000c74:	8812      	ldrh	r2, [r2, #0]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c76:	6859      	ldr	r1, [r3, #4]
  microseconds *= __dwt_divider;
 8000c78:	4354      	muls	r4, r2

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	1a52      	subs	r2, r2, r1
 8000c7e:	42a2      	cmp	r2, r4
 8000c80:	d3fb      	bcc.n	8000c7a <starTransmission+0x26>
		printf("%d \n",writePayload(nrf1,data));
 8000c82:	4629      	mov	r1, r5
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff ffbb 	bl	8000c00 <writePayload>
 8000c8a:	4601      	mov	r1, r0
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <starTransmission+0x64>)
 8000c8e:	f001 f879 	bl	8001d84 <iprintf>
		HAL_GPIO_WritePin(CE1_GPIO_Port,CE1_Pin,1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2108      	movs	r1, #8
 8000c96:	4809      	ldr	r0, [pc, #36]	; (8000cbc <starTransmission+0x68>)
 8000c98:	f000 fb36 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE1_GPIO_Port,CE1_Pin,0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	4806      	ldr	r0, [pc, #24]	; (8000cbc <starTransmission+0x68>)
 8000ca2:	f000 fb31 	bl	8001308 <HAL_GPIO_WritePin>
}
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop
 8000cac:	2000008e 	.word	0x2000008e
 8000cb0:	2000008c 	.word	0x2000008c
 8000cb4:	e0001000 	.word	0xe0001000
 8000cb8:	08002c80 	.word	0x08002c80
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <registerParse>:
uint8_t getChannel(uint8_t nrf){
	uint8_t channel;
	channel = readRegister(nrf,RF_CH);
	return channel;
}
uint8_t registerParse(uint8_t val){
 8000cc0:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <registerParse+0x28>)
 8000cc2:	b510      	push	{r4, lr}
 8000cc4:	2300      	movs	r3, #0
	uint8_t shiftedVal,countVal = 0;
	for(;countVal<8;countVal++){
		shiftedVal = val >> countVal;
		(shiftedVal & 1)? (convertedVal[countVal] = 1):(convertedVal[countVal] = 0);
 8000cc6:	2401      	movs	r4, #1
		shiftedVal = val >> countVal;
 8000cc8:	fa40 f203 	asr.w	r2, r0, r3
		(shiftedVal & 1)? (convertedVal[countVal] = 1):(convertedVal[countVal] = 0);
 8000ccc:	f012 0201 	ands.w	r2, r2, #1
 8000cd0:	bf14      	ite	ne
 8000cd2:	54cc      	strbne	r4, [r1, r3]
 8000cd4:	54ca      	strbeq	r2, [r1, r3]
 8000cd6:	3301      	adds	r3, #1
	for(;countVal<8;countVal++){
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	d1f5      	bne.n	8000cc8 <registerParse+0x8>
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <registerParse+0x2c>)
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <registerParse+0x30>)
 8000ce0:	601a      	str	r2, [r3, #0]
		pointerToString = &convertedVal[countVal];
	}
	return 0;
}
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200001a8 	.word	0x200001a8
 8000cec:	200000f4 	.word	0x200000f4
 8000cf0:	200001af 	.word	0x200001af

08000cf4 <getFIFO_Status>:
uint8_t getFIFO_Status(uint8_t nrf){
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	4604      	mov	r4, r0
	printf("\n___FIFO_STATUS Register___\n");
 8000cf8:	481d      	ldr	r0, [pc, #116]	; (8000d70 <getFIFO_Status+0x7c>)
 8000cfa:	f001 f8b7 	bl	8001e6c <puts>
	registerParse(readRegister(nrf,FIFO_STATUS));
 8000cfe:	2117      	movs	r1, #23
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff fd75 	bl	80007f0 <readRegister>
 8000d06:	f7ff ffdb 	bl	8000cc0 <registerParse>
	registerParse(readRegister(nrf,FIFO_STATUS));
 8000d0a:	2117      	movs	r1, #23
 8000d0c:	4620      	mov	r0, r4
	convertedVal[RX_EMPTY] == 1? printf("1)RX FIFO is empty (1)\n"): printf("1)RX FIFO is full (0)\n");
 8000d0e:	4c19      	ldr	r4, [pc, #100]	; (8000d74 <getFIFO_Status+0x80>)
	registerParse(readRegister(nrf,FIFO_STATUS));
 8000d10:	f7ff fd6e 	bl	80007f0 <readRegister>
 8000d14:	f7ff ffd4 	bl	8000cc0 <registerParse>
	convertedVal[RX_EMPTY] == 1? printf("1)RX FIFO is empty (1)\n"): printf("1)RX FIFO is full (0)\n");
 8000d18:	7823      	ldrb	r3, [r4, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	bf0c      	ite	eq
 8000d1e:	4816      	ldreq	r0, [pc, #88]	; (8000d78 <getFIFO_Status+0x84>)
 8000d20:	4816      	ldrne	r0, [pc, #88]	; (8000d7c <getFIFO_Status+0x88>)
 8000d22:	f001 f8a3 	bl	8001e6c <puts>
	convertedVal[RX_FULL] == 1? printf("2)RX FIFO is full (1)\n"): printf("2)RX FIFO is empty (0)\n");
 8000d26:	7863      	ldrb	r3, [r4, #1]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	bf0c      	ite	eq
 8000d2c:	4814      	ldreq	r0, [pc, #80]	; (8000d80 <getFIFO_Status+0x8c>)
 8000d2e:	4815      	ldrne	r0, [pc, #84]	; (8000d84 <getFIFO_Status+0x90>)
 8000d30:	f001 f89c 	bl	8001e6c <puts>
	printf("2) and 3) reserved\n");
 8000d34:	4814      	ldr	r0, [pc, #80]	; (8000d88 <getFIFO_Status+0x94>)
 8000d36:	f001 f899 	bl	8001e6c <puts>
	convertedVal[TX_EMPTY] == 1? printf("4)TX FIFO is empty (1)\n"): printf("4)TX FIFO is full (0)\n");
 8000d3a:	7923      	ldrb	r3, [r4, #4]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	bf0c      	ite	eq
 8000d40:	4812      	ldreq	r0, [pc, #72]	; (8000d8c <getFIFO_Status+0x98>)
 8000d42:	4813      	ldrne	r0, [pc, #76]	; (8000d90 <getFIFO_Status+0x9c>)
 8000d44:	f001 f892 	bl	8001e6c <puts>
	convertedVal[TX_FULL] == 1? printf("5)TX FIFO is full (1)\n"): printf("5)TX FIFO is empty (0)\n");
 8000d48:	7963      	ldrb	r3, [r4, #5]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	bf0c      	ite	eq
 8000d4e:	4811      	ldreq	r0, [pc, #68]	; (8000d94 <getFIFO_Status+0xa0>)
 8000d50:	4811      	ldrne	r0, [pc, #68]	; (8000d98 <getFIFO_Status+0xa4>)
 8000d52:	f001 f88b 	bl	8001e6c <puts>
	convertedVal[TX_REUSE] == 1? printf("6)Reuse data packet bit (1)\n"): printf("6)Reuse data packet bit (0)\n");
 8000d56:	79a3      	ldrb	r3, [r4, #6]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	bf0c      	ite	eq
 8000d5c:	480f      	ldreq	r0, [pc, #60]	; (8000d9c <getFIFO_Status+0xa8>)
 8000d5e:	4810      	ldrne	r0, [pc, #64]	; (8000da0 <getFIFO_Status+0xac>)
 8000d60:	f001 f884 	bl	8001e6c <puts>
	printf("7) reserved\n");
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <getFIFO_Status+0xb0>)
 8000d66:	f001 f881 	bl	8001e6c <puts>
}
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	bf00      	nop
 8000d70:	08002c85 	.word	0x08002c85
 8000d74:	200001a8 	.word	0x200001a8
 8000d78:	08002ca1 	.word	0x08002ca1
 8000d7c:	08002cb8 	.word	0x08002cb8
 8000d80:	08002cce 	.word	0x08002cce
 8000d84:	08002ce4 	.word	0x08002ce4
 8000d88:	08002cfb 	.word	0x08002cfb
 8000d8c:	08002d0e 	.word	0x08002d0e
 8000d90:	08002d25 	.word	0x08002d25
 8000d94:	08002d3b 	.word	0x08002d3b
 8000d98:	08002d51 	.word	0x08002d51
 8000d9c:	08002d68 	.word	0x08002d68
 8000da0:	08002d84 	.word	0x08002d84
 8000da4:	08002da0 	.word	0x08002da0

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x34>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	9100      	str	r1, [sp, #0]
 8000db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000db6:	645a      	str	r2, [r3, #68]	; 0x44
 8000db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000dbe:	9200      	str	r2, [sp, #0]
 8000dc0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	9101      	str	r1, [sp, #4]
 8000dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dca:	641a      	str	r2, [r3, #64]	; 0x40
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	b002      	add	sp, #8
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	2214      	movs	r2, #20
{
 8000de4:	b08b      	sub	sp, #44	; 0x2c
 8000de6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	2100      	movs	r1, #0
 8000dea:	eb0d 0002 	add.w	r0, sp, r2
 8000dee:	f000 ffc1 	bl	8001d74 <memset>
  if(hspi->Instance==SPI1)
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <HAL_SPI_MspInit+0xd4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d123      	bne.n	8000e42 <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	482f      	ldr	r0, [pc, #188]	; (8000ebc <HAL_SPI_MspInit+0xdc>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfe:	2100      	movs	r1, #0
 8000e00:	9100      	str	r1, [sp, #0]
 8000e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e08:	645a      	str	r2, [r3, #68]	; 0x44
 8000e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e0c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000e10:	9200      	str	r2, [sp, #0]
 8000e12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	9101      	str	r1, [sp, #4]
 8000e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e18:	f042 0201 	orr.w	r2, r2, #1
 8000e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e28:	23e0      	movs	r3, #224	; 0xe0
 8000e2a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e34:	2305      	movs	r3, #5
 8000e36:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f000 f985 	bl	8001148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e3e:	b00b      	add	sp, #44	; 0x2c
 8000e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hspi->Instance==SPI2)
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_SPI_MspInit+0xe0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d1fa      	bne.n	8000e3e <HAL_SPI_MspInit+0x5e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_SPI_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4a:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <HAL_SPI_MspInit+0xe4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	9402      	str	r4, [sp, #8]
 8000e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
 8000e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e5e:	9202      	str	r2, [sp, #8]
 8000e60:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	9403      	str	r4, [sp, #12]
 8000e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e66:	f042 0204 	orr.w	r2, r2, #4
 8000e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6e:	f002 0204 	and.w	r2, r2, #4
 8000e72:	9203      	str	r2, [sp, #12]
 8000e74:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	9404      	str	r4, [sp, #16]
 8000e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7a:	f042 0202 	orr.w	r2, r2, #2
 8000e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	9304      	str	r3, [sp, #16]
 8000e88:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e8c:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e90:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f000 f954 	bl	8001148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eac:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	a905      	add	r1, sp, #20
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_SPI_MspInit+0xe8>)
 8000eb2:	e7c2      	b.n	8000e3a <HAL_SPI_MspInit+0x5a>
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40003800 	.word	0x40003800
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020400 	.word	0x40020400

08000ecc <NMI_Handler>:
 8000ecc:	4770      	bx	lr

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler>

08000ed6 <SVC_Handler>:
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 b8b2 	b.w	8001044 <HAL_IncTick>

08000ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	460e      	mov	r6, r1
 8000ee4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	1ba3      	subs	r3, r4, r6
 8000eea:	429d      	cmp	r5, r3
 8000eec:	dc01      	bgt.n	8000ef2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000eee:	4628      	mov	r0, r5
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	f804 0b01 	strb.w	r0, [r4], #1
 8000efa:	e7f5      	b.n	8000ee8 <_read+0x8>

08000efc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000efc:	b510      	push	{r4, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f00:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8000f04:	4293      	cmp	r3, r2
 8000f06:	db01      	blt.n	8000f0c <_write+0x10>
	{
		ITM_SendChar(*ptr++);
	}
	return len;
}
 8000f08:	4610      	mov	r0, r2
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8000f10:	07c0      	lsls	r0, r0, #31
 8000f12:	d503      	bpl.n	8000f1c <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f14:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f18:	07c0      	lsls	r0, r0, #31
 8000f1a:	d402      	bmi.n	8000f22 <_write+0x26>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	e7f1      	b.n	8000f04 <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8000f20:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f22:	6820      	ldr	r0, [r4, #0]
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d0fb      	beq.n	8000f20 <_write+0x24>
		ITM_SendChar(*ptr++);
 8000f28:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f2a:	7020      	strb	r0, [r4, #0]
 8000f2c:	e7f6      	b.n	8000f1c <_write+0x20>
	...

08000f30 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000f30:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <_sbrk+0x2c>)
 8000f34:	6819      	ldr	r1, [r3, #0]
{
 8000f36:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000f38:	b909      	cbnz	r1, 8000f3e <_sbrk+0xe>
		heap_end = &end;
 8000f3a:	4909      	ldr	r1, [pc, #36]	; (8000f60 <_sbrk+0x30>)
 8000f3c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8000f3e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000f40:	4669      	mov	r1, sp
 8000f42:	4402      	add	r2, r0
 8000f44:	428a      	cmp	r2, r1
 8000f46:	d906      	bls.n	8000f56 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000f48:	f000 feea 	bl	8001d20 <__errno>
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000f56:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000f58:	bd08      	pop	{r3, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000090 	.word	0x20000090
 8000f60:	200001b8 	.word	0x200001b8

08000f64 <_close>:

int _close(int file)
{
	return -1;
}
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	4770      	bx	lr

08000f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000f70:	2000      	movs	r0, #0
 8000f72:	4770      	bx	lr

08000f74 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000f74:	2001      	movs	r0, #1
 8000f76:	4770      	bx	lr

08000f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000f78:	2000      	movs	r0, #0
 8000f7a:	4770      	bx	lr

08000f7c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	490f      	ldr	r1, [pc, #60]	; (8000fbc <SystemInit+0x40>)
 8000f7e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <SystemInit+0x44>)
 8000f8c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f8e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000f90:	f042 0201 	orr.w	r2, r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000f96:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fa2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <SystemInit+0x48>)
 8000fa6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fb0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fb6:	608b      	str	r3, [r1, #8]
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	24003010 	.word	0x24003010

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_InitTick+0x3c>)
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_InitTick+0x40>)
{
 8000fce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	7818      	ldrb	r0, [r3, #0]
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fda:	6810      	ldr	r0, [r2, #0]
 8000fdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fe0:	f000 f89c 	bl	800111c <HAL_SYSTICK_Config>
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	b958      	cbnz	r0, 8001000 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe8:	2d0f      	cmp	r5, #15
 8000fea:	d809      	bhi.n	8001000 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	4602      	mov	r2, r0
 8000fee:	4629      	mov	r1, r5
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f85e 	bl	80010b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_InitTick+0x44>)
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	601d      	str	r5, [r3, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001000:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000004 	.word	0x20000004
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_Init>:
{
 8001010:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_Init+0x30>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800101a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001022:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800102a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f82f 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff ffc8 	bl	8000fc8 <HAL_InitTick>
  HAL_MspInit();
 8001038:	f7ff feb6 	bl	8000da8 <HAL_MspInit>
}
 800103c:	2000      	movs	r0, #0
 800103e:	bd08      	pop	{r3, pc}
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <HAL_IncTick+0x10>)
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_IncTick+0x14>)
 8001048:	6811      	ldr	r1, [r2, #0]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	440b      	add	r3, r1
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200001b0 	.word	0x200001b0
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <HAL_GetTick+0x8>)
 800105e:	6818      	ldr	r0, [r3, #0]
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200001b0 	.word	0x200001b0

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b538      	push	{r3, r4, r5, lr}
 800106a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff fff6 	bl	800105c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001070:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	bf1c      	itt	ne
 8001074:	4b05      	ldrne	r3, [pc, #20]	; (800108c <HAL_Delay+0x24>)
 8001076:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001078:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800107a:	bf18      	it	ne
 800107c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107e:	f7ff ffed 	bl	800105c <HAL_GetTick>
 8001082:	1b40      	subs	r0, r0, r5
 8001084:	4284      	cmp	r4, r0
 8001086:	d8fa      	bhi.n	800107e <HAL_Delay+0x16>
  {
  }
}
 8001088:	bd38      	pop	{r3, r4, r5, pc}
 800108a:	bf00      	nop
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001092:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001094:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	0200      	lsls	r0, r0, #8
 80010a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80010aa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010ac:	60d3      	str	r3, [r2, #12]
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b530      	push	{r4, r5, lr}
 80010b8:	68dc      	ldr	r4, [r3, #12]
 80010ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	bf28      	it	cs
 80010c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 0501 	mov.w	r5, #1
 80010d0:	fa05 f303 	lsl.w	r3, r5, r3
 80010d4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d8:	bf8c      	ite	hi
 80010da:	3c03      	subhi	r4, #3
 80010dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010de:	4019      	ands	r1, r3
 80010e0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e2:	fa05 f404 	lsl.w	r4, r5, r4
 80010e6:	3c01      	subs	r4, #1
 80010e8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80010ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	ea42 0201 	orr.w	r2, r2, r1
 80010f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	bfad      	iteet	ge
 80010f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	f000 000f 	andlt.w	r0, r0, #15
 80010fe:	4b06      	ldrlt	r3, [pc, #24]	; (8001118 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	bfb5      	itete	lt
 8001106:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001110:	bd30      	pop	{r4, r5, pc}
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	e000ed14 	.word	0xe000ed14

0800111c <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	3801      	subs	r0, #1
 800111e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001122:	d20a      	bcs.n	800113a <HAL_SYSTICK_Config+0x1e>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001128:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	21f0      	movs	r1, #240	; 0xf0
 800112c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001300 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4a68      	ldr	r2, [pc, #416]	; (80012f8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001304 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800115e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001164:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001168:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800116c:	45b6      	cmp	lr, r6
 800116e:	f040 80ae 	bne.w	80012ce <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001172:	684c      	ldr	r4, [r1, #4]
 8001174:	f024 0710 	bic.w	r7, r4, #16
 8001178:	2f02      	cmp	r7, #2
 800117a:	d116      	bne.n	80011aa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800117c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001180:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001184:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001188:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001190:	f04f 0c0f 	mov.w	ip, #15
 8001194:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001198:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	690d      	ldr	r5, [r1, #16]
 800119e:	fa05 f50b 	lsl.w	r5, r5, fp
 80011a2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80011a6:	f8ca 5020 	str.w	r5, [sl, #32]
 80011aa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80011b0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b4:	fa05 f50a 	lsl.w	r5, r5, sl
 80011b8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ba:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011cc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80011ce:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	d811      	bhi.n	80011f8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80011d4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	68cf      	ldr	r7, [r1, #12]
 80011dc:	fa07 fc0a 	lsl.w	ip, r7, sl
 80011e0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80011e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ec:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80011f0:	409f      	lsls	r7, r3
 80011f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011f6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011f8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	688f      	ldr	r7, [r1, #8]
 80011fe:	fa07 f70a 	lsl.w	r7, r7, sl
 8001202:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001204:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	00e5      	lsls	r5, r4, #3
 8001208:	d561      	bpl.n	80012ce <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	f04f 0b00 	mov.w	fp, #0
 800120e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001212:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	4d39      	ldr	r5, [pc, #228]	; (80012fc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001218:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800121c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001220:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001224:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001228:	9703      	str	r7, [sp, #12]
 800122a:	9f03      	ldr	r7, [sp, #12]
 800122c:	f023 0703 	bic.w	r7, r3, #3
 8001230:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001234:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800123c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001244:	f04f 0e0f 	mov.w	lr, #15
 8001248:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800124e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001252:	d043      	beq.n	80012dc <HAL_GPIO_Init+0x194>
 8001254:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001258:	42a8      	cmp	r0, r5
 800125a:	d041      	beq.n	80012e0 <HAL_GPIO_Init+0x198>
 800125c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001260:	42a8      	cmp	r0, r5
 8001262:	d03f      	beq.n	80012e4 <HAL_GPIO_Init+0x19c>
 8001264:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001268:	42a8      	cmp	r0, r5
 800126a:	d03d      	beq.n	80012e8 <HAL_GPIO_Init+0x1a0>
 800126c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001270:	42a8      	cmp	r0, r5
 8001272:	d03b      	beq.n	80012ec <HAL_GPIO_Init+0x1a4>
 8001274:	4548      	cmp	r0, r9
 8001276:	d03b      	beq.n	80012f0 <HAL_GPIO_Init+0x1a8>
 8001278:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800127c:	42a8      	cmp	r0, r5
 800127e:	d039      	beq.n	80012f4 <HAL_GPIO_Init+0x1ac>
 8001280:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001284:	42a8      	cmp	r0, r5
 8001286:	bf14      	ite	ne
 8001288:	2508      	movne	r5, #8
 800128a:	2507      	moveq	r5, #7
 800128c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001290:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001294:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001296:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001298:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800129e:	bf0c      	ite	eq
 80012a0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012a2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80012a4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80012a6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80012ac:	bf0c      	ite	eq
 80012ae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012b0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80012b2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012ba:	bf0c      	ite	eq
 80012bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012be:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80012c0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80012c2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80012c6:	bf54      	ite	pl
 80012c8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80012ca:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80012cc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	3301      	adds	r3, #1
 80012d0:	2b10      	cmp	r3, #16
 80012d2:	f47f af44 	bne.w	800115e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80012d6:	b005      	add	sp, #20
 80012d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012dc:	465d      	mov	r5, fp
 80012de:	e7d5      	b.n	800128c <HAL_GPIO_Init+0x144>
 80012e0:	2501      	movs	r5, #1
 80012e2:	e7d3      	b.n	800128c <HAL_GPIO_Init+0x144>
 80012e4:	2502      	movs	r5, #2
 80012e6:	e7d1      	b.n	800128c <HAL_GPIO_Init+0x144>
 80012e8:	2503      	movs	r5, #3
 80012ea:	e7cf      	b.n	800128c <HAL_GPIO_Init+0x144>
 80012ec:	2504      	movs	r5, #4
 80012ee:	e7cd      	b.n	800128c <HAL_GPIO_Init+0x144>
 80012f0:	2505      	movs	r5, #5
 80012f2:	e7cb      	b.n	800128c <HAL_GPIO_Init+0x144>
 80012f4:	2506      	movs	r5, #6
 80012f6:	e7c9      	b.n	800128c <HAL_GPIO_Init+0x144>
 80012f8:	40013c00 	.word	0x40013c00
 80012fc:	40020000 	.word	0x40020000
 8001300:	40023800 	.word	0x40023800
 8001304:	40021400 	.word	0x40021400

08001308 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	b10a      	cbz	r2, 800130e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	6181      	str	r1, [r0, #24]
 800130c:	4770      	bx	lr
 800130e:	0409      	lsls	r1, r1, #16
 8001310:	e7fb      	b.n	800130a <HAL_GPIO_WritePin+0x2>
	...

08001314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	4604      	mov	r4, r0
 800131a:	b918      	cbnz	r0, 8001324 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800131c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800131e:	b002      	add	sp, #8
 8001320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001324:	6803      	ldr	r3, [r0, #0]
 8001326:	07dd      	lsls	r5, r3, #31
 8001328:	d410      	bmi.n	800134c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	0798      	lsls	r0, r3, #30
 800132e:	d458      	bmi.n	80013e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	071a      	lsls	r2, r3, #28
 8001334:	f100 809a 	bmi.w	800146c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	075b      	lsls	r3, r3, #29
 800133c:	f100 80b8 	bmi.w	80014b0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001340:	69a2      	ldr	r2, [r4, #24]
 8001342:	2a00      	cmp	r2, #0
 8001344:	f040 8119 	bne.w	800157a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001348:	2000      	movs	r0, #0
 800134a:	e7e8      	b.n	800131e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134c:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	f002 020c 	and.w	r2, r2, #12
 8001354:	2a04      	cmp	r2, #4
 8001356:	d007      	beq.n	8001368 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135e:	2a08      	cmp	r2, #8
 8001360:	d10a      	bne.n	8001378 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	0259      	lsls	r1, r3, #9
 8001366:	d507      	bpl.n	8001378 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	4b9f      	ldr	r3, [pc, #636]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	039a      	lsls	r2, r3, #14
 800136e:	d5dc      	bpl.n	800132a <HAL_RCC_OscConfig+0x16>
 8001370:	6863      	ldr	r3, [r4, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1d9      	bne.n	800132a <HAL_RCC_OscConfig+0x16>
 8001376:	e7d1      	b.n	800131c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001378:	6863      	ldr	r3, [r4, #4]
 800137a:	4d9b      	ldr	r5, [pc, #620]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	d111      	bne.n	80013a6 <HAL_RCC_OscConfig+0x92>
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800138a:	f7ff fe67 	bl	800105c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4d96      	ldr	r5, [pc, #600]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001390:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	682b      	ldr	r3, [r5, #0]
 8001394:	039b      	lsls	r3, r3, #14
 8001396:	d4c8      	bmi.n	800132a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fe60 	bl	800105c <HAL_GetTick>
 800139c:	1b80      	subs	r0, r0, r6
 800139e:	2864      	cmp	r0, #100	; 0x64
 80013a0:	d9f7      	bls.n	8001392 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80013a2:	2003      	movs	r0, #3
 80013a4:	e7bb      	b.n	800131e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013aa:	d104      	bne.n	80013b6 <HAL_RCC_OscConfig+0xa2>
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b2:	602b      	str	r3, [r5, #0]
 80013b4:	e7e5      	b.n	8001382 <HAL_RCC_OscConfig+0x6e>
 80013b6:	682a      	ldr	r2, [r5, #0]
 80013b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013bc:	602a      	str	r2, [r5, #0]
 80013be:	682a      	ldr	r2, [r5, #0]
 80013c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1df      	bne.n	800138a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80013ca:	f7ff fe47 	bl	800105c <HAL_GetTick>
 80013ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	039f      	lsls	r7, r3, #14
 80013d4:	d5a9      	bpl.n	800132a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d6:	f7ff fe41 	bl	800105c <HAL_GetTick>
 80013da:	1b80      	subs	r0, r0, r6
 80013dc:	2864      	cmp	r0, #100	; 0x64
 80013de:	d9f7      	bls.n	80013d0 <HAL_RCC_OscConfig+0xbc>
 80013e0:	e7df      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	f012 0f0c 	tst.w	r2, #12
 80013ea:	d007      	beq.n	80013fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	2a08      	cmp	r2, #8
 80013f4:	d111      	bne.n	800141a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	025e      	lsls	r6, r3, #9
 80013fa:	d40e      	bmi.n	800141a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fc:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	0795      	lsls	r5, r2, #30
 8001402:	d502      	bpl.n	800140a <HAL_RCC_OscConfig+0xf6>
 8001404:	68e2      	ldr	r2, [r4, #12]
 8001406:	2a01      	cmp	r2, #1
 8001408:	d188      	bne.n	800131c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	6921      	ldr	r1, [r4, #16]
 800140e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001412:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001416:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001418:	e78a      	b.n	8001330 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800141a:	68e2      	ldr	r2, [r4, #12]
 800141c:	4b73      	ldr	r3, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x2d8>)
 800141e:	b1b2      	cbz	r2, 800144e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001424:	f7ff fe1a 	bl	800105c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4d6f      	ldr	r5, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800142a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	0798      	lsls	r0, r3, #30
 8001430:	d507      	bpl.n	8001442 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	6922      	ldr	r2, [r4, #16]
 8001436:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800143a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	e776      	b.n	8001330 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fe0b 	bl	800105c <HAL_GetTick>
 8001446:	1b80      	subs	r0, r0, r6
 8001448:	2802      	cmp	r0, #2
 800144a:	d9ef      	bls.n	800142c <HAL_RCC_OscConfig+0x118>
 800144c:	e7a9      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800144e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001450:	f7ff fe04 	bl	800105c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001454:	4d64      	ldr	r5, [pc, #400]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001456:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	0799      	lsls	r1, r3, #30
 800145c:	f57f af68 	bpl.w	8001330 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fdfc 	bl	800105c <HAL_GetTick>
 8001464:	1b80      	subs	r0, r0, r6
 8001466:	2802      	cmp	r0, #2
 8001468:	d9f6      	bls.n	8001458 <HAL_RCC_OscConfig+0x144>
 800146a:	e79a      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146c:	6962      	ldr	r2, [r4, #20]
 800146e:	4b60      	ldr	r3, [pc, #384]	; (80015f0 <HAL_RCC_OscConfig+0x2dc>)
 8001470:	b17a      	cbz	r2, 8001492 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001476:	f7ff fdf1 	bl	800105c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	4d5b      	ldr	r5, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800147c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001480:	079f      	lsls	r7, r3, #30
 8001482:	f53f af59 	bmi.w	8001338 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001486:	f7ff fde9 	bl	800105c <HAL_GetTick>
 800148a:	1b80      	subs	r0, r0, r6
 800148c:	2802      	cmp	r0, #2
 800148e:	d9f6      	bls.n	800147e <HAL_RCC_OscConfig+0x16a>
 8001490:	e787      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001492:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001494:	f7ff fde2 	bl	800105c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4d53      	ldr	r5, [pc, #332]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800149a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800149e:	0798      	lsls	r0, r3, #30
 80014a0:	f57f af4a 	bpl.w	8001338 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fdda 	bl	800105c <HAL_GetTick>
 80014a8:	1b80      	subs	r0, r0, r6
 80014aa:	2802      	cmp	r0, #2
 80014ac:	d9f6      	bls.n	800149c <HAL_RCC_OscConfig+0x188>
 80014ae:	e778      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b0:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 80014b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80014b8:	d128      	bne.n	800150c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014ce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	4d48      	ldr	r5, [pc, #288]	; (80015f4 <HAL_RCC_OscConfig+0x2e0>)
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	05d9      	lsls	r1, r3, #23
 80014d6:	d51b      	bpl.n	8001510 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	68a3      	ldr	r3, [r4, #8]
 80014da:	4d43      	ldr	r5, [pc, #268]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d127      	bne.n	8001530 <HAL_RCC_OscConfig+0x21c>
 80014e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014e8:	f7ff fdb8 	bl	800105c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	4d3e      	ldr	r5, [pc, #248]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80014ee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014f6:	079b      	lsls	r3, r3, #30
 80014f8:	d539      	bpl.n	800156e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80014fa:	2e00      	cmp	r6, #0
 80014fc:	f43f af20 	beq.w	8001340 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001500:	4a39      	ldr	r2, [pc, #228]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 8001502:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	e719      	b.n	8001340 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800150c:	2600      	movs	r6, #0
 800150e:	e7df      	b.n	80014d0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001516:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001518:	f7ff fda0 	bl	800105c <HAL_GetTick>
 800151c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	05da      	lsls	r2, r3, #23
 8001522:	d4d9      	bmi.n	80014d8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001524:	f7ff fd9a 	bl	800105c <HAL_GetTick>
 8001528:	1bc0      	subs	r0, r0, r7
 800152a:	2802      	cmp	r0, #2
 800152c:	d9f7      	bls.n	800151e <HAL_RCC_OscConfig+0x20a>
 800152e:	e738      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001530:	2b05      	cmp	r3, #5
 8001532:	d104      	bne.n	800153e <HAL_RCC_OscConfig+0x22a>
 8001534:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	672b      	str	r3, [r5, #112]	; 0x70
 800153c:	e7d0      	b.n	80014e0 <HAL_RCC_OscConfig+0x1cc>
 800153e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	672a      	str	r2, [r5, #112]	; 0x70
 8001546:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001548:	f022 0204 	bic.w	r2, r2, #4
 800154c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ca      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001552:	f7ff fd83 	bl	800105c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800155a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800155e:	0798      	lsls	r0, r3, #30
 8001560:	d5cb      	bpl.n	80014fa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fd7b 	bl	800105c <HAL_GetTick>
 8001566:	1bc0      	subs	r0, r0, r7
 8001568:	4540      	cmp	r0, r8
 800156a:	d9f7      	bls.n	800155c <HAL_RCC_OscConfig+0x248>
 800156c:	e719      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fd75 	bl	800105c <HAL_GetTick>
 8001572:	1bc0      	subs	r0, r0, r7
 8001574:	4540      	cmp	r0, r8
 8001576:	d9bd      	bls.n	80014f4 <HAL_RCC_OscConfig+0x1e0>
 8001578:	e713      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157a:	4d1b      	ldr	r5, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
 800157c:	68ab      	ldr	r3, [r5, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	f43f aeca 	beq.w	800131c <HAL_RCC_OscConfig+0x8>
 8001588:	4e1b      	ldr	r6, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x2e4>)
 800158a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800158e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001590:	d134      	bne.n	80015fc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001592:	f7ff fd63 	bl	800105c <HAL_GetTick>
 8001596:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	0199      	lsls	r1, r3, #6
 800159c:	d41e      	bmi.n	80015dc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800159e:	6a22      	ldr	r2, [r4, #32]
 80015a0:	69e3      	ldr	r3, [r4, #28]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015a6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4c0d      	ldr	r4, [pc, #52]	; (80015e8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b4:	0852      	lsrs	r2, r2, #1
 80015b6:	3a01      	subs	r2, #1
 80015b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015bc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015be:	2301      	movs	r3, #1
 80015c0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80015c2:	f7ff fd4b 	bl	800105c <HAL_GetTick>
 80015c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	019a      	lsls	r2, r3, #6
 80015cc:	f53f aebc 	bmi.w	8001348 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fd44 	bl	800105c <HAL_GetTick>
 80015d4:	1b40      	subs	r0, r0, r5
 80015d6:	2802      	cmp	r0, #2
 80015d8:	d9f6      	bls.n	80015c8 <HAL_RCC_OscConfig+0x2b4>
 80015da:	e6e2      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fd3e 	bl	800105c <HAL_GetTick>
 80015e0:	1bc0      	subs	r0, r0, r7
 80015e2:	2802      	cmp	r0, #2
 80015e4:	d9d8      	bls.n	8001598 <HAL_RCC_OscConfig+0x284>
 80015e6:	e6dc      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470000 	.word	0x42470000
 80015f0:	42470e80 	.word	0x42470e80
 80015f4:	40007000 	.word	0x40007000
 80015f8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80015fc:	f7ff fd2e 	bl	800105c <HAL_GetTick>
 8001600:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	019b      	lsls	r3, r3, #6
 8001606:	f57f ae9f 	bpl.w	8001348 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fd27 	bl	800105c <HAL_GetTick>
 800160e:	1b00      	subs	r0, r0, r4
 8001610:	2802      	cmp	r0, #2
 8001612:	d9f6      	bls.n	8001602 <HAL_RCC_OscConfig+0x2ee>
 8001614:	e6c5      	b.n	80013a2 <HAL_RCC_OscConfig+0x8e>
 8001616:	bf00      	nop

08001618 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001618:	b570      	push	{r4, r5, r6, lr}
 800161a:	460d      	mov	r5, r1
 800161c:	b088      	sub	sp, #32
 800161e:	4616      	mov	r6, r2
 8001620:	4c20      	ldr	r4, [pc, #128]	; (80016a4 <HAL_RCC_MCOConfig+0x8c>)
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001622:	b9f0      	cbnz	r0, 8001662 <HAL_RCC_MCOConfig+0x4a>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001624:	9001      	str	r0, [sp, #4]
 8001626:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6323      	str	r3, [r4, #48]	; 0x30
 800162e:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	9005      	str	r0, [sp, #20]
    __MCO1_CLK_ENABLE();
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800163a:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800163c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001640:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001646:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800164a:	4817      	ldr	r0, [pc, #92]	; (80016a8 <HAL_RCC_MCOConfig+0x90>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800164e:	f7ff fd7b 	bl	8001148 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001652:	68a1      	ldr	r1, [r4, #8]
 8001654:	f021 61ec 	bic.w	r1, r1, #123731968	; 0x7600000
 8001658:	4331      	orrs	r1, r6
 800165a:	4329      	orrs	r1, r5
 800165c:	60a1      	str	r1, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800165e:	b008      	add	sp, #32
 8001660:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	6b22      	ldr	r2, [r4, #48]	; 0x30
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <HAL_RCC_MCOConfig+0x94>)
    __MCO2_CLK_ENABLE();
 800166a:	f042 0204 	orr.w	r2, r2, #4
 800166e:	6322      	str	r2, [r4, #48]	; 0x30
 8001670:	6b22      	ldr	r2, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	9305      	str	r3, [sp, #20]
    __MCO2_CLK_ENABLE();
 8001674:	f002 0204 	and.w	r2, r2, #4
 8001678:	9202      	str	r2, [sp, #8]
 800167a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800167c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800167e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001682:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2202      	movs	r2, #2
 8001686:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001688:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2203      	movs	r2, #3
 800168c:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800168e:	f7ff fd5b 	bl	8001148 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001692:	68a3      	ldr	r3, [r4, #8]
 8001694:	ea45 01c6 	orr.w	r1, r5, r6, lsl #3
 8001698:	f023 4578 	bic.w	r5, r3, #4160749568	; 0xf8000000
 800169c:	430d      	orrs	r5, r1
 800169e:	60a5      	str	r5, [r4, #8]
}
 80016a0:	e7dd      	b.n	800165e <HAL_RCC_MCOConfig+0x46>
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020800 	.word	0x40020800

080016b0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b0:	4913      	ldr	r1, [pc, #76]	; (8001700 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80016b2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b4:	688b      	ldr	r3, [r1, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_GetSysClockFreq+0x16>
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d003      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c2:	4810      	ldr	r0, [pc, #64]	; (8001704 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80016c4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80016c6:	4810      	ldr	r0, [pc, #64]	; (8001708 <HAL_RCC_GetSysClockFreq+0x58>)
 80016c8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016cc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ce:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d4:	bf14      	ite	ne
 80016d6:	480c      	ldrne	r0, [pc, #48]	; (8001708 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d8:	480a      	ldreq	r0, [pc, #40]	; (8001704 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016da:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016de:	bf18      	it	ne
 80016e0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e6:	fba1 0100 	umull	r0, r1, r1, r0
 80016ea:	f7fe fdc1 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_RCC_GetSysClockFreq+0x50>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016f6:	3301      	adds	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80016fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80016fe:	bd08      	pop	{r3, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	00f42400 	.word	0x00f42400
 8001708:	007a1200 	.word	0x007a1200

0800170c <HAL_RCC_ClockConfig>:
{
 800170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001710:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001712:	4604      	mov	r4, r0
 8001714:	b910      	cbnz	r0, 800171c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001716:	2001      	movs	r0, #1
 8001718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b44      	ldr	r3, [pc, #272]	; (8001830 <HAL_RCC_ClockConfig+0x124>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	f002 020f 	and.w	r2, r2, #15
 8001724:	428a      	cmp	r2, r1
 8001726:	d328      	bcc.n	800177a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	6821      	ldr	r1, [r4, #0]
 800172a:	078f      	lsls	r7, r1, #30
 800172c:	d42d      	bmi.n	800178a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	07c8      	lsls	r0, r1, #31
 8001730:	d440      	bmi.n	80017b4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_RCC_ClockConfig+0x124>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f002 020f 	and.w	r2, r2, #15
 800173a:	4295      	cmp	r5, r2
 800173c:	d366      	bcc.n	800180c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	0751      	lsls	r1, r2, #29
 8001742:	d46c      	bmi.n	800181e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	0713      	lsls	r3, r2, #28
 8001746:	d507      	bpl.n	8001758 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001748:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <HAL_RCC_ClockConfig+0x128>)
 800174a:	6921      	ldr	r1, [r4, #16]
 800174c:	6893      	ldr	r3, [r2, #8]
 800174e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001752:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001756:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001758:	f7ff ffaa 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_RCC_ClockConfig+0x128>)
 800175e:	4a36      	ldr	r2, [pc, #216]	; (8001838 <HAL_RCC_ClockConfig+0x12c>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	40d8      	lsrs	r0, r3
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_RCC_ClockConfig+0x130>)
 800176c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff fc2a 	bl	8000fc8 <HAL_InitTick>
  return HAL_OK;
 8001774:	2000      	movs	r0, #0
 8001776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	4299      	cmp	r1, r3
 8001786:	d1c6      	bne.n	8001716 <HAL_RCC_ClockConfig+0xa>
 8001788:	e7ce      	b.n	8001728 <HAL_RCC_ClockConfig+0x1c>
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	bf1e      	ittt	ne
 8001792:	689a      	ldrne	r2, [r3, #8]
 8001794:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001798:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	bf42      	ittt	mi
 800179e:	689a      	ldrmi	r2, [r3, #8]
 80017a0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80017a4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	68a0      	ldr	r0, [r4, #8]
 80017aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017ae:	4302      	orrs	r2, r0
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	e7bc      	b.n	800172e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b4:	6862      	ldr	r2, [r4, #4]
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_RCC_ClockConfig+0x128>)
 80017b8:	2a01      	cmp	r2, #1
 80017ba:	d11d      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	d0a8      	beq.n	8001716 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c4:	4e1b      	ldr	r6, [pc, #108]	; (8001834 <HAL_RCC_ClockConfig+0x128>)
 80017c6:	68b3      	ldr	r3, [r6, #8]
 80017c8:	f023 0303 	bic.w	r3, r3, #3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80017d0:	f7ff fc44 	bl	800105c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80017d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	68b3      	ldr	r3, [r6, #8]
 80017dc:	6862      	ldr	r2, [r4, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017e6:	d0a4      	beq.n	8001732 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fc38 	bl	800105c <HAL_GetTick>
 80017ec:	1bc0      	subs	r0, r0, r7
 80017ee:	4540      	cmp	r0, r8
 80017f0:	d9f3      	bls.n	80017da <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80017f2:	2003      	movs	r0, #3
}
 80017f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f8:	1e91      	subs	r1, r2, #2
 80017fa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	d802      	bhi.n	8001806 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001800:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001804:	e7dd      	b.n	80017c2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	f013 0f02 	tst.w	r3, #2
 800180a:	e7da      	b.n	80017c2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180c:	b2ea      	uxtb	r2, r5
 800180e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	429d      	cmp	r5, r3
 8001818:	f47f af7d 	bne.w	8001716 <HAL_RCC_ClockConfig+0xa>
 800181c:	e78f      	b.n	800173e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181e:	4905      	ldr	r1, [pc, #20]	; (8001834 <HAL_RCC_ClockConfig+0x128>)
 8001820:	68e0      	ldr	r0, [r4, #12]
 8001822:	688b      	ldr	r3, [r1, #8]
 8001824:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001828:	4303      	orrs	r3, r0
 800182a:	608b      	str	r3, [r1, #8]
 800182c:	e78a      	b.n	8001744 <HAL_RCC_ClockConfig+0x38>
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	08002dac 	.word	0x08002dac
 800183c:	20000000 	.word	0x20000000

08001840 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001840:	4b01      	ldr	r3, [pc, #4]	; (8001848 <HAL_RCC_GetHCLKFreq+0x8>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000

0800184c <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	4604      	mov	r4, r0
 8001850:	460e      	mov	r6, r1
 8001852:	4615      	mov	r5, r2
 8001854:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001856:	6821      	ldr	r1, [r4, #0]
 8001858:	688a      	ldr	r2, [r1, #8]
 800185a:	ea36 0302 	bics.w	r3, r6, r2
 800185e:	d001      	beq.n	8001864 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001860:	2000      	movs	r0, #0
}
 8001862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001864:	1c6b      	adds	r3, r5, #1
 8001866:	d0f7      	beq.n	8001858 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001868:	f7ff fbf8 	bl	800105c <HAL_GetTick>
 800186c:	1bc0      	subs	r0, r0, r7
 800186e:	4285      	cmp	r5, r0
 8001870:	d8f1      	bhi.n	8001856 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800187a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800187c:	6862      	ldr	r2, [r4, #4]
 800187e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001882:	d10a      	bne.n	800189a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8001884:	68a2      	ldr	r2, [r4, #8]
 8001886:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800188a:	d002      	beq.n	8001892 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800188c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001890:	d103      	bne.n	800189a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001898:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800189a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800189c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80018a0:	d107      	bne.n	80018b2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018b0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80018b8:	2300      	movs	r3, #0
 80018ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80018be:	2003      	movs	r0, #3
 80018c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80018c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018c6:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <SPI_EndRxTxTransaction+0x54>)
 80018ca:	4e14      	ldr	r6, [pc, #80]	; (800191c <SPI_EndRxTxTransaction+0x58>)
 80018cc:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018ce:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80018d0:	fbb5 f6f6 	udiv	r6, r5, r6
 80018d4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80018d8:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018da:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80018de:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80018e0:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018e2:	d10d      	bne.n	8001900 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80018e4:	460a      	mov	r2, r1
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	f7ff ffb0 	bl	800184c <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80018ec:	b910      	cbnz	r0, 80018f4 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 80018ee:	2000      	movs	r0, #0
}
 80018f0:	b002      	add	sp, #8
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80018fc:	2003      	movs	r0, #3
 80018fe:	e7f7      	b.n	80018f0 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001900:	9b01      	ldr	r3, [sp, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f3      	beq.n	80018ee <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	3b01      	subs	r3, #1
 800190a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	d4f5      	bmi.n	8001900 <SPI_EndRxTxTransaction+0x3c>
 8001914:	e7eb      	b.n	80018ee <SPI_EndRxTxTransaction+0x2a>
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	016e3600 	.word	0x016e3600

08001920 <HAL_SPI_Init>:
{
 8001920:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001922:	4604      	mov	r4, r0
 8001924:	2800      	cmp	r0, #0
 8001926:	d036      	beq.n	8001996 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800192c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001930:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001934:	b91b      	cbnz	r3, 800193e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001936:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800193a:	f7ff fa51 	bl	8000de0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800193e:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001940:	68a0      	ldr	r0, [r4, #8]
 8001942:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001944:	2302      	movs	r3, #2
 8001946:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800194a:	680b      	ldr	r3, [r1, #0]
 800194c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001950:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001952:	6863      	ldr	r3, [r4, #4]
 8001954:	4303      	orrs	r3, r0
 8001956:	68e0      	ldr	r0, [r4, #12]
 8001958:	4303      	orrs	r3, r0
 800195a:	6920      	ldr	r0, [r4, #16]
 800195c:	4303      	orrs	r3, r0
 800195e:	6960      	ldr	r0, [r4, #20]
 8001960:	4303      	orrs	r3, r0
 8001962:	69e0      	ldr	r0, [r4, #28]
 8001964:	4303      	orrs	r3, r0
 8001966:	6a20      	ldr	r0, [r4, #32]
 8001968:	4303      	orrs	r3, r0
 800196a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800196c:	4303      	orrs	r3, r0
 800196e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001972:	4303      	orrs	r3, r0
 8001974:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001976:	0c12      	lsrs	r2, r2, #16
 8001978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800197a:	f002 0204 	and.w	r2, r2, #4
 800197e:	431a      	orrs	r2, r3
 8001980:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001982:	69cb      	ldr	r3, [r1, #28]
 8001984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001988:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800198a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800198c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800198e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001990:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001994:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001996:	2001      	movs	r0, #1
}
 8001998:	bd10      	pop	{r4, pc}

0800199a <HAL_SPI_Transmit>:
{
 800199a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800199e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80019a0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80019a4:	2b01      	cmp	r3, #1
{
 80019a6:	4604      	mov	r4, r0
 80019a8:	460d      	mov	r5, r1
 80019aa:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80019ac:	f000 809b 	beq.w	8001ae6 <HAL_SPI_Transmit+0x14c>
 80019b0:	2301      	movs	r3, #1
 80019b2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80019b6:	f7ff fb51 	bl	800105c <HAL_GetTick>
 80019ba:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80019bc:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80019c0:	b2c0      	uxtb	r0, r0
 80019c2:	2801      	cmp	r0, #1
 80019c4:	f040 808d 	bne.w	8001ae2 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	d05d      	beq.n	8001a88 <HAL_SPI_Transmit+0xee>
 80019cc:	f1b8 0f00 	cmp.w	r8, #0
 80019d0:	d05a      	beq.n	8001a88 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019d8:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019da:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019dc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019de:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80019e0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80019e4:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019e6:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80019e8:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019ea:	6420      	str	r0, [r4, #64]	; 0x40
 80019ec:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80019ee:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 80019f4:	bf08      	it	eq
 80019f6:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 80019f8:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80019fc:	bf04      	itt	eq
 80019fe:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001a02:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a04:	6803      	ldr	r3, [r0, #0]
 8001a06:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001a08:	bf5e      	ittt	pl
 8001a0a:	6803      	ldrpl	r3, [r0, #0]
 8001a0c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001a10:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a12:	68e3      	ldr	r3, [r4, #12]
 8001a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a18:	6863      	ldr	r3, [r4, #4]
 8001a1a:	d13e      	bne.n	8001a9a <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a1c:	b113      	cbz	r3, 8001a24 <HAL_SPI_Transmit+0x8a>
 8001a1e:	f1b8 0f01 	cmp.w	r8, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a24:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001a28:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a2a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001a34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b9a3      	cbnz	r3, 8001a64 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a3a:	463a      	mov	r2, r7
 8001a3c:	4631      	mov	r1, r6
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff ff40 	bl	80018c4 <SPI_EndRxTxTransaction>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d149      	bne.n	8001adc <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a48:	68a3      	ldr	r3, [r4, #8]
 8001a4a:	b933      	cbnz	r3, 8001a5a <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	9201      	str	r2, [sp, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001a5c:	3000      	adds	r0, #0
 8001a5e:	bf18      	it	ne
 8001a60:	2001      	movne	r0, #1
 8001a62:	e011      	b.n	8001a88 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a64:	6822      	ldr	r2, [r4, #0]
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	0798      	lsls	r0, r3, #30
 8001a6a:	d505      	bpl.n	8001a78 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a6e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001a72:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a74:	6323      	str	r3, [r4, #48]	; 0x30
 8001a76:	e7d9      	b.n	8001a2c <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a78:	f7ff faf0 	bl	800105c <HAL_GetTick>
 8001a7c:	1bc0      	subs	r0, r0, r7
 8001a7e:	42b0      	cmp	r0, r6
 8001a80:	d3d8      	bcc.n	8001a34 <HAL_SPI_Transmit+0x9a>
 8001a82:	1c71      	adds	r1, r6, #1
 8001a84:	d0d6      	beq.n	8001a34 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8001a86:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001a94:	b002      	add	sp, #8
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a9a:	b113      	cbz	r3, 8001aa2 <HAL_SPI_Transmit+0x108>
 8001a9c:	f1b8 0f01 	cmp.w	r8, #1
 8001aa0:	d108      	bne.n	8001ab4 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aa2:	782b      	ldrb	r3, [r5, #0]
 8001aa4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001aac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001ab4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0be      	beq.n	8001a3a <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	0792      	lsls	r2, r2, #30
 8001ac2:	d503      	bpl.n	8001acc <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ac4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	731a      	strb	r2, [r3, #12]
 8001aca:	e7ec      	b.n	8001aa6 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001acc:	f7ff fac6 	bl	800105c <HAL_GetTick>
 8001ad0:	1bc0      	subs	r0, r0, r7
 8001ad2:	4286      	cmp	r6, r0
 8001ad4:	d8ee      	bhi.n	8001ab4 <HAL_SPI_Transmit+0x11a>
 8001ad6:	1c73      	adds	r3, r6, #1
 8001ad8:	d0ec      	beq.n	8001ab4 <HAL_SPI_Transmit+0x11a>
 8001ada:	e7d4      	b.n	8001a86 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001adc:	2320      	movs	r3, #32
 8001ade:	6563      	str	r3, [r4, #84]	; 0x54
 8001ae0:	e7b2      	b.n	8001a48 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	e7d0      	b.n	8001a88 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	e7d4      	b.n	8001a94 <HAL_SPI_Transmit+0xfa>

08001aea <HAL_SPI_TransmitReceive>:
{
 8001aea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001aee:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001af0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001af4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001af6:	2b01      	cmp	r3, #1
{
 8001af8:	4604      	mov	r4, r0
 8001afa:	460d      	mov	r5, r1
 8001afc:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001afe:	f000 80e2 	beq.w	8001cc6 <HAL_SPI_TransmitReceive+0x1dc>
 8001b02:	2301      	movs	r3, #1
 8001b04:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001b08:	f7ff faa8 	bl	800105c <HAL_GetTick>
  tmp_state           = hspi->State;
 8001b0c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001b10:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001b12:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b14:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001b16:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b18:	d00a      	beq.n	8001b30 <HAL_SPI_TransmitReceive+0x46>
 8001b1a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001b1e:	f040 80d0 	bne.w	8001cc2 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b22:	68a0      	ldr	r0, [r4, #8]
 8001b24:	2800      	cmp	r0, #0
 8001b26:	f040 80cc 	bne.w	8001cc2 <HAL_SPI_TransmitReceive+0x1d8>
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	f040 80c9 	bne.w	8001cc2 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b30:	2d00      	cmp	r5, #0
 8001b32:	f000 80c4 	beq.w	8001cbe <HAL_SPI_TransmitReceive+0x1d4>
 8001b36:	f1b9 0f00 	cmp.w	r9, #0
 8001b3a:	f000 80c0 	beq.w	8001cbe <HAL_SPI_TransmitReceive+0x1d4>
 8001b3e:	2e00      	cmp	r6, #0
 8001b40:	f000 80bd 	beq.w	8001cbe <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b44:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b48:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b4c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b4e:	bf1c      	itt	ne
 8001b50:	2305      	movne	r3, #5
 8001b52:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001b5a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b5c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b5e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001b60:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001b62:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b64:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001b66:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b68:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001b6a:	bf58      	it	pl
 8001b6c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b6e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001b70:	bf58      	it	pl
 8001b72:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001b76:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001b78:	bf58      	it	pl
 8001b7a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b7c:	68e2      	ldr	r2, [r4, #12]
 8001b7e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001b82:	d158      	bne.n	8001c36 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b84:	b109      	cbz	r1, 8001b8a <HAL_SPI_TransmitReceive+0xa0>
 8001b86:	2e01      	cmp	r6, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b8a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001b8e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001b90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b92:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001b9a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b9ab      	cbnz	r3, 8001bce <HAL_SPI_TransmitReceive+0xe4>
 8001ba2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b993      	cbnz	r3, 8001bce <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ba8:	4642      	mov	r2, r8
 8001baa:	4639      	mov	r1, r7
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff fe89 	bl	80018c4 <SPI_EndRxTxTransaction>
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	f040 8081 	bne.w	8001cba <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bb8:	68a3      	ldr	r3, [r4, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d132      	bne.n	8001c24 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	9001      	str	r0, [sp, #4]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	9201      	str	r2, [sp, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	9b01      	ldr	r3, [sp, #4]
 8001bcc:	e02a      	b.n	8001c24 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	6893      	ldr	r3, [r2, #8]
 8001bd2:	0799      	lsls	r1, r3, #30
 8001bd4:	d50d      	bpl.n	8001bf2 <HAL_SPI_TransmitReceive+0x108>
 8001bd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b153      	cbz	r3, 8001bf2 <HAL_SPI_TransmitReceive+0x108>
 8001bdc:	b14d      	cbz	r5, 8001bf2 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001be0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001be4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001be6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001be8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001bf0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bf2:	6893      	ldr	r3, [r2, #8]
 8001bf4:	07db      	lsls	r3, r3, #31
 8001bf6:	d50c      	bpl.n	8001c12 <HAL_SPI_TransmitReceive+0x128>
 8001bf8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b14b      	cbz	r3, 8001c12 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c00:	68d2      	ldr	r2, [r2, #12]
 8001c02:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c06:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001c08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001c10:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c12:	f7ff fa23 	bl	800105c <HAL_GetTick>
 8001c16:	eba0 0008 	sub.w	r0, r0, r8
 8001c1a:	4287      	cmp	r7, r0
 8001c1c:	d8be      	bhi.n	8001b9c <HAL_SPI_TransmitReceive+0xb2>
 8001c1e:	1c7e      	adds	r6, r7, #1
 8001c20:	d0bc      	beq.n	8001b9c <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001c22:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001c30:	b003      	add	sp, #12
 8001c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c36:	b109      	cbz	r1, 8001c3c <HAL_SPI_TransmitReceive+0x152>
 8001c38:	2e01      	cmp	r6, #1
 8001c3a:	d108      	bne.n	8001c4e <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c3c:	782a      	ldrb	r2, [r5, #0]
 8001c3e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c42:	3301      	adds	r3, #1
 8001c44:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001c46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001c4e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b91b      	cbnz	r3, 8001c5e <HAL_SPI_TransmitReceive+0x174>
 8001c56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0a4      	beq.n	8001ba8 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	6893      	ldr	r3, [r2, #8]
 8001c62:	0798      	lsls	r0, r3, #30
 8001c64:	d50e      	bpl.n	8001c84 <HAL_SPI_TransmitReceive+0x19a>
 8001c66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b15b      	cbz	r3, 8001c84 <HAL_SPI_TransmitReceive+0x19a>
 8001c6c:	b155      	cbz	r5, 8001c84 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001c74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c76:	3301      	adds	r3, #1
 8001c78:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001c82:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c84:	6822      	ldr	r2, [r4, #0]
 8001c86:	6893      	ldr	r3, [r2, #8]
 8001c88:	07d9      	lsls	r1, r3, #31
 8001c8a:	d50d      	bpl.n	8001ca8 <HAL_SPI_TransmitReceive+0x1be>
 8001c8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b153      	cbz	r3, 8001ca8 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c94:	68d2      	ldr	r2, [r2, #12]
 8001c96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001c9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001ca6:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ca8:	f7ff f9d8 	bl	800105c <HAL_GetTick>
 8001cac:	eba0 0008 	sub.w	r0, r0, r8
 8001cb0:	4287      	cmp	r7, r0
 8001cb2:	d8cd      	bhi.n	8001c50 <HAL_SPI_TransmitReceive+0x166>
 8001cb4:	1c7b      	adds	r3, r7, #1
 8001cb6:	d0cb      	beq.n	8001c50 <HAL_SPI_TransmitReceive+0x166>
 8001cb8:	e7b3      	b.n	8001c22 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	e7b0      	b.n	8001c24 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	e7ae      	b.n	8001c24 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	e7b2      	b.n	8001c30 <HAL_SPI_TransmitReceive+0x146>
	...

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cd2:	e003      	b.n	8001cdc <LoopCopyDataInit>

08001cd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cda:	3104      	adds	r1, #4

08001cdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cdc:	480b      	ldr	r0, [pc, #44]	; (8001d0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ce0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ce2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ce4:	d3f6      	bcc.n	8001cd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ce8:	e002      	b.n	8001cf0 <LoopFillZerobss>

08001cea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cec:	f842 3b04 	str.w	r3, [r2], #4

08001cf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cf4:	d3f9      	bcc.n	8001cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cf6:	f7ff f941 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f000 f817 	bl	8001d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7fe fcd3 	bl	80006a8 <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d08:	08002e64 	.word	0x08002e64
  ldr  r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d10:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001d14:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001d18:	200001b8 	.word	0x200001b8

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>
	...

08001d20 <__errno>:
 8001d20:	4b01      	ldr	r3, [pc, #4]	; (8001d28 <__errno+0x8>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	2000000c 	.word	0x2000000c

08001d2c <__libc_init_array>:
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	4e0d      	ldr	r6, [pc, #52]	; (8001d64 <__libc_init_array+0x38>)
 8001d30:	4c0d      	ldr	r4, [pc, #52]	; (8001d68 <__libc_init_array+0x3c>)
 8001d32:	1ba4      	subs	r4, r4, r6
 8001d34:	10a4      	asrs	r4, r4, #2
 8001d36:	2500      	movs	r5, #0
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	d109      	bne.n	8001d50 <__libc_init_array+0x24>
 8001d3c:	4e0b      	ldr	r6, [pc, #44]	; (8001d6c <__libc_init_array+0x40>)
 8001d3e:	4c0c      	ldr	r4, [pc, #48]	; (8001d70 <__libc_init_array+0x44>)
 8001d40:	f000 ff7c 	bl	8002c3c <_init>
 8001d44:	1ba4      	subs	r4, r4, r6
 8001d46:	10a4      	asrs	r4, r4, #2
 8001d48:	2500      	movs	r5, #0
 8001d4a:	42a5      	cmp	r5, r4
 8001d4c:	d105      	bne.n	8001d5a <__libc_init_array+0x2e>
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
 8001d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d54:	4798      	blx	r3
 8001d56:	3501      	adds	r5, #1
 8001d58:	e7ee      	b.n	8001d38 <__libc_init_array+0xc>
 8001d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d5e:	4798      	blx	r3
 8001d60:	3501      	adds	r5, #1
 8001d62:	e7f2      	b.n	8001d4a <__libc_init_array+0x1e>
 8001d64:	08002e5c 	.word	0x08002e5c
 8001d68:	08002e5c 	.word	0x08002e5c
 8001d6c:	08002e5c 	.word	0x08002e5c
 8001d70:	08002e60 	.word	0x08002e60

08001d74 <memset>:
 8001d74:	4402      	add	r2, r0
 8001d76:	4603      	mov	r3, r0
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d100      	bne.n	8001d7e <memset+0xa>
 8001d7c:	4770      	bx	lr
 8001d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d82:	e7f9      	b.n	8001d78 <memset+0x4>

08001d84 <iprintf>:
 8001d84:	b40f      	push	{r0, r1, r2, r3}
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <iprintf+0x2c>)
 8001d88:	b513      	push	{r0, r1, r4, lr}
 8001d8a:	681c      	ldr	r4, [r3, #0]
 8001d8c:	b124      	cbz	r4, 8001d98 <iprintf+0x14>
 8001d8e:	69a3      	ldr	r3, [r4, #24]
 8001d90:	b913      	cbnz	r3, 8001d98 <iprintf+0x14>
 8001d92:	4620      	mov	r0, r4
 8001d94:	f000 fa24 	bl	80021e0 <__sinit>
 8001d98:	ab05      	add	r3, sp, #20
 8001d9a:	9a04      	ldr	r2, [sp, #16]
 8001d9c:	68a1      	ldr	r1, [r4, #8]
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	4620      	mov	r0, r4
 8001da2:	f000 fbe1 	bl	8002568 <_vfiprintf_r>
 8001da6:	b002      	add	sp, #8
 8001da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dac:	b004      	add	sp, #16
 8001dae:	4770      	bx	lr
 8001db0:	2000000c 	.word	0x2000000c

08001db4 <_puts_r>:
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	460e      	mov	r6, r1
 8001db8:	4605      	mov	r5, r0
 8001dba:	b118      	cbz	r0, 8001dc4 <_puts_r+0x10>
 8001dbc:	6983      	ldr	r3, [r0, #24]
 8001dbe:	b90b      	cbnz	r3, 8001dc4 <_puts_r+0x10>
 8001dc0:	f000 fa0e 	bl	80021e0 <__sinit>
 8001dc4:	69ab      	ldr	r3, [r5, #24]
 8001dc6:	68ac      	ldr	r4, [r5, #8]
 8001dc8:	b913      	cbnz	r3, 8001dd0 <_puts_r+0x1c>
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f000 fa08 	bl	80021e0 <__sinit>
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <_puts_r+0xac>)
 8001dd2:	429c      	cmp	r4, r3
 8001dd4:	d117      	bne.n	8001e06 <_puts_r+0x52>
 8001dd6:	686c      	ldr	r4, [r5, #4]
 8001dd8:	89a3      	ldrh	r3, [r4, #12]
 8001dda:	071b      	lsls	r3, r3, #28
 8001ddc:	d51d      	bpl.n	8001e1a <_puts_r+0x66>
 8001dde:	6923      	ldr	r3, [r4, #16]
 8001de0:	b1db      	cbz	r3, 8001e1a <_puts_r+0x66>
 8001de2:	3e01      	subs	r6, #1
 8001de4:	68a3      	ldr	r3, [r4, #8]
 8001de6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001dea:	3b01      	subs	r3, #1
 8001dec:	60a3      	str	r3, [r4, #8]
 8001dee:	b9e9      	cbnz	r1, 8001e2c <_puts_r+0x78>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	da2e      	bge.n	8001e52 <_puts_r+0x9e>
 8001df4:	4622      	mov	r2, r4
 8001df6:	210a      	movs	r1, #10
 8001df8:	4628      	mov	r0, r5
 8001dfa:	f000 f83f 	bl	8001e7c <__swbuf_r>
 8001dfe:	3001      	adds	r0, #1
 8001e00:	d011      	beq.n	8001e26 <_puts_r+0x72>
 8001e02:	200a      	movs	r0, #10
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <_puts_r+0xb0>)
 8001e08:	429c      	cmp	r4, r3
 8001e0a:	d101      	bne.n	8001e10 <_puts_r+0x5c>
 8001e0c:	68ac      	ldr	r4, [r5, #8]
 8001e0e:	e7e3      	b.n	8001dd8 <_puts_r+0x24>
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <_puts_r+0xb4>)
 8001e12:	429c      	cmp	r4, r3
 8001e14:	bf08      	it	eq
 8001e16:	68ec      	ldreq	r4, [r5, #12]
 8001e18:	e7de      	b.n	8001dd8 <_puts_r+0x24>
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f000 f87f 	bl	8001f20 <__swsetup_r>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d0dd      	beq.n	8001de2 <_puts_r+0x2e>
 8001e26:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da04      	bge.n	8001e3a <_puts_r+0x86>
 8001e30:	69a2      	ldr	r2, [r4, #24]
 8001e32:	4293      	cmp	r3, r2
 8001e34:	db06      	blt.n	8001e44 <_puts_r+0x90>
 8001e36:	290a      	cmp	r1, #10
 8001e38:	d004      	beq.n	8001e44 <_puts_r+0x90>
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	6022      	str	r2, [r4, #0]
 8001e40:	7019      	strb	r1, [r3, #0]
 8001e42:	e7cf      	b.n	8001de4 <_puts_r+0x30>
 8001e44:	4622      	mov	r2, r4
 8001e46:	4628      	mov	r0, r5
 8001e48:	f000 f818 	bl	8001e7c <__swbuf_r>
 8001e4c:	3001      	adds	r0, #1
 8001e4e:	d1c9      	bne.n	8001de4 <_puts_r+0x30>
 8001e50:	e7e9      	b.n	8001e26 <_puts_r+0x72>
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	200a      	movs	r0, #10
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	6022      	str	r2, [r4, #0]
 8001e5a:	7018      	strb	r0, [r3, #0]
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
 8001e5e:	bf00      	nop
 8001e60:	08002de0 	.word	0x08002de0
 8001e64:	08002e00 	.word	0x08002e00
 8001e68:	08002dc0 	.word	0x08002dc0

08001e6c <puts>:
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <puts+0xc>)
 8001e6e:	4601      	mov	r1, r0
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	f7ff bf9f 	b.w	8001db4 <_puts_r>
 8001e76:	bf00      	nop
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <__swbuf_r>:
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	460e      	mov	r6, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	4605      	mov	r5, r0
 8001e84:	b118      	cbz	r0, 8001e8e <__swbuf_r+0x12>
 8001e86:	6983      	ldr	r3, [r0, #24]
 8001e88:	b90b      	cbnz	r3, 8001e8e <__swbuf_r+0x12>
 8001e8a:	f000 f9a9 	bl	80021e0 <__sinit>
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <__swbuf_r+0x98>)
 8001e90:	429c      	cmp	r4, r3
 8001e92:	d12a      	bne.n	8001eea <__swbuf_r+0x6e>
 8001e94:	686c      	ldr	r4, [r5, #4]
 8001e96:	69a3      	ldr	r3, [r4, #24]
 8001e98:	60a3      	str	r3, [r4, #8]
 8001e9a:	89a3      	ldrh	r3, [r4, #12]
 8001e9c:	071a      	lsls	r2, r3, #28
 8001e9e:	d52e      	bpl.n	8001efe <__swbuf_r+0x82>
 8001ea0:	6923      	ldr	r3, [r4, #16]
 8001ea2:	b363      	cbz	r3, 8001efe <__swbuf_r+0x82>
 8001ea4:	6923      	ldr	r3, [r4, #16]
 8001ea6:	6820      	ldr	r0, [r4, #0]
 8001ea8:	1ac0      	subs	r0, r0, r3
 8001eaa:	6963      	ldr	r3, [r4, #20]
 8001eac:	b2f6      	uxtb	r6, r6
 8001eae:	4298      	cmp	r0, r3
 8001eb0:	4637      	mov	r7, r6
 8001eb2:	db04      	blt.n	8001ebe <__swbuf_r+0x42>
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	f000 f928 	bl	800210c <_fflush_r>
 8001ebc:	bb28      	cbnz	r0, 8001f0a <__swbuf_r+0x8e>
 8001ebe:	68a3      	ldr	r3, [r4, #8]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60a3      	str	r3, [r4, #8]
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	6022      	str	r2, [r4, #0]
 8001eca:	701e      	strb	r6, [r3, #0]
 8001ecc:	6963      	ldr	r3, [r4, #20]
 8001ece:	3001      	adds	r0, #1
 8001ed0:	4298      	cmp	r0, r3
 8001ed2:	d004      	beq.n	8001ede <__swbuf_r+0x62>
 8001ed4:	89a3      	ldrh	r3, [r4, #12]
 8001ed6:	07db      	lsls	r3, r3, #31
 8001ed8:	d519      	bpl.n	8001f0e <__swbuf_r+0x92>
 8001eda:	2e0a      	cmp	r6, #10
 8001edc:	d117      	bne.n	8001f0e <__swbuf_r+0x92>
 8001ede:	4621      	mov	r1, r4
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	f000 f913 	bl	800210c <_fflush_r>
 8001ee6:	b190      	cbz	r0, 8001f0e <__swbuf_r+0x92>
 8001ee8:	e00f      	b.n	8001f0a <__swbuf_r+0x8e>
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <__swbuf_r+0x9c>)
 8001eec:	429c      	cmp	r4, r3
 8001eee:	d101      	bne.n	8001ef4 <__swbuf_r+0x78>
 8001ef0:	68ac      	ldr	r4, [r5, #8]
 8001ef2:	e7d0      	b.n	8001e96 <__swbuf_r+0x1a>
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <__swbuf_r+0xa0>)
 8001ef6:	429c      	cmp	r4, r3
 8001ef8:	bf08      	it	eq
 8001efa:	68ec      	ldreq	r4, [r5, #12]
 8001efc:	e7cb      	b.n	8001e96 <__swbuf_r+0x1a>
 8001efe:	4621      	mov	r1, r4
 8001f00:	4628      	mov	r0, r5
 8001f02:	f000 f80d 	bl	8001f20 <__swsetup_r>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d0cc      	beq.n	8001ea4 <__swbuf_r+0x28>
 8001f0a:	f04f 37ff 	mov.w	r7, #4294967295
 8001f0e:	4638      	mov	r0, r7
 8001f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	08002de0 	.word	0x08002de0
 8001f18:	08002e00 	.word	0x08002e00
 8001f1c:	08002dc0 	.word	0x08002dc0

08001f20 <__swsetup_r>:
 8001f20:	4b32      	ldr	r3, [pc, #200]	; (8001fec <__swsetup_r+0xcc>)
 8001f22:	b570      	push	{r4, r5, r6, lr}
 8001f24:	681d      	ldr	r5, [r3, #0]
 8001f26:	4606      	mov	r6, r0
 8001f28:	460c      	mov	r4, r1
 8001f2a:	b125      	cbz	r5, 8001f36 <__swsetup_r+0x16>
 8001f2c:	69ab      	ldr	r3, [r5, #24]
 8001f2e:	b913      	cbnz	r3, 8001f36 <__swsetup_r+0x16>
 8001f30:	4628      	mov	r0, r5
 8001f32:	f000 f955 	bl	80021e0 <__sinit>
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <__swsetup_r+0xd0>)
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	d10f      	bne.n	8001f5c <__swsetup_r+0x3c>
 8001f3c:	686c      	ldr	r4, [r5, #4]
 8001f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	0715      	lsls	r5, r2, #28
 8001f46:	d42c      	bmi.n	8001fa2 <__swsetup_r+0x82>
 8001f48:	06d0      	lsls	r0, r2, #27
 8001f4a:	d411      	bmi.n	8001f70 <__swsetup_r+0x50>
 8001f4c:	2209      	movs	r2, #9
 8001f4e:	6032      	str	r2, [r6, #0]
 8001f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f54:	81a3      	strh	r3, [r4, #12]
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5a:	bd70      	pop	{r4, r5, r6, pc}
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <__swsetup_r+0xd4>)
 8001f5e:	429c      	cmp	r4, r3
 8001f60:	d101      	bne.n	8001f66 <__swsetup_r+0x46>
 8001f62:	68ac      	ldr	r4, [r5, #8]
 8001f64:	e7eb      	b.n	8001f3e <__swsetup_r+0x1e>
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <__swsetup_r+0xd8>)
 8001f68:	429c      	cmp	r4, r3
 8001f6a:	bf08      	it	eq
 8001f6c:	68ec      	ldreq	r4, [r5, #12]
 8001f6e:	e7e6      	b.n	8001f3e <__swsetup_r+0x1e>
 8001f70:	0751      	lsls	r1, r2, #29
 8001f72:	d512      	bpl.n	8001f9a <__swsetup_r+0x7a>
 8001f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f76:	b141      	cbz	r1, 8001f8a <__swsetup_r+0x6a>
 8001f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f7c:	4299      	cmp	r1, r3
 8001f7e:	d002      	beq.n	8001f86 <__swsetup_r+0x66>
 8001f80:	4630      	mov	r0, r6
 8001f82:	f000 fa1b 	bl	80023bc <_free_r>
 8001f86:	2300      	movs	r3, #0
 8001f88:	6363      	str	r3, [r4, #52]	; 0x34
 8001f8a:	89a3      	ldrh	r3, [r4, #12]
 8001f8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f90:	81a3      	strh	r3, [r4, #12]
 8001f92:	2300      	movs	r3, #0
 8001f94:	6063      	str	r3, [r4, #4]
 8001f96:	6923      	ldr	r3, [r4, #16]
 8001f98:	6023      	str	r3, [r4, #0]
 8001f9a:	89a3      	ldrh	r3, [r4, #12]
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	81a3      	strh	r3, [r4, #12]
 8001fa2:	6923      	ldr	r3, [r4, #16]
 8001fa4:	b94b      	cbnz	r3, 8001fba <__swsetup_r+0x9a>
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb0:	d003      	beq.n	8001fba <__swsetup_r+0x9a>
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	f000 f9c1 	bl	800233c <__smakebuf_r>
 8001fba:	89a2      	ldrh	r2, [r4, #12]
 8001fbc:	f012 0301 	ands.w	r3, r2, #1
 8001fc0:	d00c      	beq.n	8001fdc <__swsetup_r+0xbc>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60a3      	str	r3, [r4, #8]
 8001fc6:	6963      	ldr	r3, [r4, #20]
 8001fc8:	425b      	negs	r3, r3
 8001fca:	61a3      	str	r3, [r4, #24]
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	b953      	cbnz	r3, 8001fe6 <__swsetup_r+0xc6>
 8001fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001fd8:	d1ba      	bne.n	8001f50 <__swsetup_r+0x30>
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	0792      	lsls	r2, r2, #30
 8001fde:	bf58      	it	pl
 8001fe0:	6963      	ldrpl	r3, [r4, #20]
 8001fe2:	60a3      	str	r3, [r4, #8]
 8001fe4:	e7f2      	b.n	8001fcc <__swsetup_r+0xac>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e7f7      	b.n	8001fda <__swsetup_r+0xba>
 8001fea:	bf00      	nop
 8001fec:	2000000c 	.word	0x2000000c
 8001ff0:	08002de0 	.word	0x08002de0
 8001ff4:	08002e00 	.word	0x08002e00
 8001ff8:	08002dc0 	.word	0x08002dc0

08001ffc <__sflush_r>:
 8001ffc:	898a      	ldrh	r2, [r1, #12]
 8001ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002002:	4605      	mov	r5, r0
 8002004:	0710      	lsls	r0, r2, #28
 8002006:	460c      	mov	r4, r1
 8002008:	d45a      	bmi.n	80020c0 <__sflush_r+0xc4>
 800200a:	684b      	ldr	r3, [r1, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	dc05      	bgt.n	800201c <__sflush_r+0x20>
 8002010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	dc02      	bgt.n	800201c <__sflush_r+0x20>
 8002016:	2000      	movs	r0, #0
 8002018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800201c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800201e:	2e00      	cmp	r6, #0
 8002020:	d0f9      	beq.n	8002016 <__sflush_r+0x1a>
 8002022:	2300      	movs	r3, #0
 8002024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002028:	682f      	ldr	r7, [r5, #0]
 800202a:	602b      	str	r3, [r5, #0]
 800202c:	d033      	beq.n	8002096 <__sflush_r+0x9a>
 800202e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	075a      	lsls	r2, r3, #29
 8002034:	d505      	bpl.n	8002042 <__sflush_r+0x46>
 8002036:	6863      	ldr	r3, [r4, #4]
 8002038:	1ac0      	subs	r0, r0, r3
 800203a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800203c:	b10b      	cbz	r3, 8002042 <__sflush_r+0x46>
 800203e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002040:	1ac0      	subs	r0, r0, r3
 8002042:	2300      	movs	r3, #0
 8002044:	4602      	mov	r2, r0
 8002046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002048:	6a21      	ldr	r1, [r4, #32]
 800204a:	4628      	mov	r0, r5
 800204c:	47b0      	blx	r6
 800204e:	1c43      	adds	r3, r0, #1
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	d106      	bne.n	8002062 <__sflush_r+0x66>
 8002054:	6829      	ldr	r1, [r5, #0]
 8002056:	291d      	cmp	r1, #29
 8002058:	d84b      	bhi.n	80020f2 <__sflush_r+0xf6>
 800205a:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <__sflush_r+0x10c>)
 800205c:	40ca      	lsrs	r2, r1
 800205e:	07d6      	lsls	r6, r2, #31
 8002060:	d547      	bpl.n	80020f2 <__sflush_r+0xf6>
 8002062:	2200      	movs	r2, #0
 8002064:	6062      	str	r2, [r4, #4]
 8002066:	04d9      	lsls	r1, r3, #19
 8002068:	6922      	ldr	r2, [r4, #16]
 800206a:	6022      	str	r2, [r4, #0]
 800206c:	d504      	bpl.n	8002078 <__sflush_r+0x7c>
 800206e:	1c42      	adds	r2, r0, #1
 8002070:	d101      	bne.n	8002076 <__sflush_r+0x7a>
 8002072:	682b      	ldr	r3, [r5, #0]
 8002074:	b903      	cbnz	r3, 8002078 <__sflush_r+0x7c>
 8002076:	6560      	str	r0, [r4, #84]	; 0x54
 8002078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800207a:	602f      	str	r7, [r5, #0]
 800207c:	2900      	cmp	r1, #0
 800207e:	d0ca      	beq.n	8002016 <__sflush_r+0x1a>
 8002080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002084:	4299      	cmp	r1, r3
 8002086:	d002      	beq.n	800208e <__sflush_r+0x92>
 8002088:	4628      	mov	r0, r5
 800208a:	f000 f997 	bl	80023bc <_free_r>
 800208e:	2000      	movs	r0, #0
 8002090:	6360      	str	r0, [r4, #52]	; 0x34
 8002092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002096:	6a21      	ldr	r1, [r4, #32]
 8002098:	2301      	movs	r3, #1
 800209a:	4628      	mov	r0, r5
 800209c:	47b0      	blx	r6
 800209e:	1c41      	adds	r1, r0, #1
 80020a0:	d1c6      	bne.n	8002030 <__sflush_r+0x34>
 80020a2:	682b      	ldr	r3, [r5, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0c3      	beq.n	8002030 <__sflush_r+0x34>
 80020a8:	2b1d      	cmp	r3, #29
 80020aa:	d001      	beq.n	80020b0 <__sflush_r+0xb4>
 80020ac:	2b16      	cmp	r3, #22
 80020ae:	d101      	bne.n	80020b4 <__sflush_r+0xb8>
 80020b0:	602f      	str	r7, [r5, #0]
 80020b2:	e7b0      	b.n	8002016 <__sflush_r+0x1a>
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ba:	81a3      	strh	r3, [r4, #12]
 80020bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c0:	690f      	ldr	r7, [r1, #16]
 80020c2:	2f00      	cmp	r7, #0
 80020c4:	d0a7      	beq.n	8002016 <__sflush_r+0x1a>
 80020c6:	0793      	lsls	r3, r2, #30
 80020c8:	680e      	ldr	r6, [r1, #0]
 80020ca:	bf08      	it	eq
 80020cc:	694b      	ldreq	r3, [r1, #20]
 80020ce:	600f      	str	r7, [r1, #0]
 80020d0:	bf18      	it	ne
 80020d2:	2300      	movne	r3, #0
 80020d4:	eba6 0807 	sub.w	r8, r6, r7
 80020d8:	608b      	str	r3, [r1, #8]
 80020da:	f1b8 0f00 	cmp.w	r8, #0
 80020de:	dd9a      	ble.n	8002016 <__sflush_r+0x1a>
 80020e0:	4643      	mov	r3, r8
 80020e2:	463a      	mov	r2, r7
 80020e4:	6a21      	ldr	r1, [r4, #32]
 80020e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020e8:	4628      	mov	r0, r5
 80020ea:	47b0      	blx	r6
 80020ec:	2800      	cmp	r0, #0
 80020ee:	dc07      	bgt.n	8002100 <__sflush_r+0x104>
 80020f0:	89a3      	ldrh	r3, [r4, #12]
 80020f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f6:	81a3      	strh	r3, [r4, #12]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002100:	4407      	add	r7, r0
 8002102:	eba8 0800 	sub.w	r8, r8, r0
 8002106:	e7e8      	b.n	80020da <__sflush_r+0xde>
 8002108:	20400001 	.word	0x20400001

0800210c <_fflush_r>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	690b      	ldr	r3, [r1, #16]
 8002110:	4605      	mov	r5, r0
 8002112:	460c      	mov	r4, r1
 8002114:	b1db      	cbz	r3, 800214e <_fflush_r+0x42>
 8002116:	b118      	cbz	r0, 8002120 <_fflush_r+0x14>
 8002118:	6983      	ldr	r3, [r0, #24]
 800211a:	b90b      	cbnz	r3, 8002120 <_fflush_r+0x14>
 800211c:	f000 f860 	bl	80021e0 <__sinit>
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <_fflush_r+0x48>)
 8002122:	429c      	cmp	r4, r3
 8002124:	d109      	bne.n	800213a <_fflush_r+0x2e>
 8002126:	686c      	ldr	r4, [r5, #4]
 8002128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800212c:	b17b      	cbz	r3, 800214e <_fflush_r+0x42>
 800212e:	4621      	mov	r1, r4
 8002130:	4628      	mov	r0, r5
 8002132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002136:	f7ff bf61 	b.w	8001ffc <__sflush_r>
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_fflush_r+0x4c>)
 800213c:	429c      	cmp	r4, r3
 800213e:	d101      	bne.n	8002144 <_fflush_r+0x38>
 8002140:	68ac      	ldr	r4, [r5, #8]
 8002142:	e7f1      	b.n	8002128 <_fflush_r+0x1c>
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <_fflush_r+0x50>)
 8002146:	429c      	cmp	r4, r3
 8002148:	bf08      	it	eq
 800214a:	68ec      	ldreq	r4, [r5, #12]
 800214c:	e7ec      	b.n	8002128 <_fflush_r+0x1c>
 800214e:	2000      	movs	r0, #0
 8002150:	bd38      	pop	{r3, r4, r5, pc}
 8002152:	bf00      	nop
 8002154:	08002de0 	.word	0x08002de0
 8002158:	08002e00 	.word	0x08002e00
 800215c:	08002dc0 	.word	0x08002dc0

08002160 <_cleanup_r>:
 8002160:	4901      	ldr	r1, [pc, #4]	; (8002168 <_cleanup_r+0x8>)
 8002162:	f000 b8a9 	b.w	80022b8 <_fwalk_reent>
 8002166:	bf00      	nop
 8002168:	0800210d 	.word	0x0800210d

0800216c <std.isra.0>:
 800216c:	2300      	movs	r3, #0
 800216e:	b510      	push	{r4, lr}
 8002170:	4604      	mov	r4, r0
 8002172:	6003      	str	r3, [r0, #0]
 8002174:	6043      	str	r3, [r0, #4]
 8002176:	6083      	str	r3, [r0, #8]
 8002178:	8181      	strh	r1, [r0, #12]
 800217a:	6643      	str	r3, [r0, #100]	; 0x64
 800217c:	81c2      	strh	r2, [r0, #14]
 800217e:	6103      	str	r3, [r0, #16]
 8002180:	6143      	str	r3, [r0, #20]
 8002182:	6183      	str	r3, [r0, #24]
 8002184:	4619      	mov	r1, r3
 8002186:	2208      	movs	r2, #8
 8002188:	305c      	adds	r0, #92	; 0x5c
 800218a:	f7ff fdf3 	bl	8001d74 <memset>
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <std.isra.0+0x38>)
 8002190:	6263      	str	r3, [r4, #36]	; 0x24
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <std.isra.0+0x3c>)
 8002194:	62a3      	str	r3, [r4, #40]	; 0x28
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <std.isra.0+0x40>)
 8002198:	62e3      	str	r3, [r4, #44]	; 0x2c
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <std.isra.0+0x44>)
 800219c:	6224      	str	r4, [r4, #32]
 800219e:	6323      	str	r3, [r4, #48]	; 0x30
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	bf00      	nop
 80021a4:	08002ae1 	.word	0x08002ae1
 80021a8:	08002b03 	.word	0x08002b03
 80021ac:	08002b3b 	.word	0x08002b3b
 80021b0:	08002b5f 	.word	0x08002b5f

080021b4 <__sfmoreglue>:
 80021b4:	b570      	push	{r4, r5, r6, lr}
 80021b6:	1e4a      	subs	r2, r1, #1
 80021b8:	2568      	movs	r5, #104	; 0x68
 80021ba:	4355      	muls	r5, r2
 80021bc:	460e      	mov	r6, r1
 80021be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021c2:	f000 f949 	bl	8002458 <_malloc_r>
 80021c6:	4604      	mov	r4, r0
 80021c8:	b140      	cbz	r0, 80021dc <__sfmoreglue+0x28>
 80021ca:	2100      	movs	r1, #0
 80021cc:	e880 0042 	stmia.w	r0, {r1, r6}
 80021d0:	300c      	adds	r0, #12
 80021d2:	60a0      	str	r0, [r4, #8]
 80021d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021d8:	f7ff fdcc 	bl	8001d74 <memset>
 80021dc:	4620      	mov	r0, r4
 80021de:	bd70      	pop	{r4, r5, r6, pc}

080021e0 <__sinit>:
 80021e0:	6983      	ldr	r3, [r0, #24]
 80021e2:	b510      	push	{r4, lr}
 80021e4:	4604      	mov	r4, r0
 80021e6:	bb33      	cbnz	r3, 8002236 <__sinit+0x56>
 80021e8:	6483      	str	r3, [r0, #72]	; 0x48
 80021ea:	64c3      	str	r3, [r0, #76]	; 0x4c
 80021ec:	6503      	str	r3, [r0, #80]	; 0x50
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <__sinit+0x58>)
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <__sinit+0x5c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6282      	str	r2, [r0, #40]	; 0x28
 80021f6:	4298      	cmp	r0, r3
 80021f8:	bf04      	itt	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	6183      	streq	r3, [r0, #24]
 80021fe:	f000 f81f 	bl	8002240 <__sfp>
 8002202:	6060      	str	r0, [r4, #4]
 8002204:	4620      	mov	r0, r4
 8002206:	f000 f81b 	bl	8002240 <__sfp>
 800220a:	60a0      	str	r0, [r4, #8]
 800220c:	4620      	mov	r0, r4
 800220e:	f000 f817 	bl	8002240 <__sfp>
 8002212:	2200      	movs	r2, #0
 8002214:	60e0      	str	r0, [r4, #12]
 8002216:	2104      	movs	r1, #4
 8002218:	6860      	ldr	r0, [r4, #4]
 800221a:	f7ff ffa7 	bl	800216c <std.isra.0>
 800221e:	2201      	movs	r2, #1
 8002220:	2109      	movs	r1, #9
 8002222:	68a0      	ldr	r0, [r4, #8]
 8002224:	f7ff ffa2 	bl	800216c <std.isra.0>
 8002228:	2202      	movs	r2, #2
 800222a:	2112      	movs	r1, #18
 800222c:	68e0      	ldr	r0, [r4, #12]
 800222e:	f7ff ff9d 	bl	800216c <std.isra.0>
 8002232:	2301      	movs	r3, #1
 8002234:	61a3      	str	r3, [r4, #24]
 8002236:	bd10      	pop	{r4, pc}
 8002238:	08002dbc 	.word	0x08002dbc
 800223c:	08002161 	.word	0x08002161

08002240 <__sfp>:
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <__sfp+0x74>)
 8002244:	681e      	ldr	r6, [r3, #0]
 8002246:	69b3      	ldr	r3, [r6, #24]
 8002248:	4607      	mov	r7, r0
 800224a:	b913      	cbnz	r3, 8002252 <__sfp+0x12>
 800224c:	4630      	mov	r0, r6
 800224e:	f7ff ffc7 	bl	80021e0 <__sinit>
 8002252:	3648      	adds	r6, #72	; 0x48
 8002254:	68b4      	ldr	r4, [r6, #8]
 8002256:	6873      	ldr	r3, [r6, #4]
 8002258:	3b01      	subs	r3, #1
 800225a:	d503      	bpl.n	8002264 <__sfp+0x24>
 800225c:	6833      	ldr	r3, [r6, #0]
 800225e:	b133      	cbz	r3, 800226e <__sfp+0x2e>
 8002260:	6836      	ldr	r6, [r6, #0]
 8002262:	e7f7      	b.n	8002254 <__sfp+0x14>
 8002264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002268:	b16d      	cbz	r5, 8002286 <__sfp+0x46>
 800226a:	3468      	adds	r4, #104	; 0x68
 800226c:	e7f4      	b.n	8002258 <__sfp+0x18>
 800226e:	2104      	movs	r1, #4
 8002270:	4638      	mov	r0, r7
 8002272:	f7ff ff9f 	bl	80021b4 <__sfmoreglue>
 8002276:	6030      	str	r0, [r6, #0]
 8002278:	2800      	cmp	r0, #0
 800227a:	d1f1      	bne.n	8002260 <__sfp+0x20>
 800227c:	230c      	movs	r3, #12
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4604      	mov	r4, r0
 8002282:	4620      	mov	r0, r4
 8002284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800228a:	81e3      	strh	r3, [r4, #14]
 800228c:	2301      	movs	r3, #1
 800228e:	81a3      	strh	r3, [r4, #12]
 8002290:	6665      	str	r5, [r4, #100]	; 0x64
 8002292:	6025      	str	r5, [r4, #0]
 8002294:	60a5      	str	r5, [r4, #8]
 8002296:	6065      	str	r5, [r4, #4]
 8002298:	6125      	str	r5, [r4, #16]
 800229a:	6165      	str	r5, [r4, #20]
 800229c:	61a5      	str	r5, [r4, #24]
 800229e:	2208      	movs	r2, #8
 80022a0:	4629      	mov	r1, r5
 80022a2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022a6:	f7ff fd65 	bl	8001d74 <memset>
 80022aa:	6365      	str	r5, [r4, #52]	; 0x34
 80022ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80022ae:	64a5      	str	r5, [r4, #72]	; 0x48
 80022b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80022b2:	e7e6      	b.n	8002282 <__sfp+0x42>
 80022b4:	08002dbc 	.word	0x08002dbc

080022b8 <_fwalk_reent>:
 80022b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022bc:	4680      	mov	r8, r0
 80022be:	4689      	mov	r9, r1
 80022c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022c4:	2600      	movs	r6, #0
 80022c6:	b914      	cbnz	r4, 80022ce <_fwalk_reent+0x16>
 80022c8:	4630      	mov	r0, r6
 80022ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022ce:	68a5      	ldr	r5, [r4, #8]
 80022d0:	6867      	ldr	r7, [r4, #4]
 80022d2:	3f01      	subs	r7, #1
 80022d4:	d501      	bpl.n	80022da <_fwalk_reent+0x22>
 80022d6:	6824      	ldr	r4, [r4, #0]
 80022d8:	e7f5      	b.n	80022c6 <_fwalk_reent+0xe>
 80022da:	89ab      	ldrh	r3, [r5, #12]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d907      	bls.n	80022f0 <_fwalk_reent+0x38>
 80022e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022e4:	3301      	adds	r3, #1
 80022e6:	d003      	beq.n	80022f0 <_fwalk_reent+0x38>
 80022e8:	4629      	mov	r1, r5
 80022ea:	4640      	mov	r0, r8
 80022ec:	47c8      	blx	r9
 80022ee:	4306      	orrs	r6, r0
 80022f0:	3568      	adds	r5, #104	; 0x68
 80022f2:	e7ee      	b.n	80022d2 <_fwalk_reent+0x1a>

080022f4 <__swhatbuf_r>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	460e      	mov	r6, r1
 80022f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fc:	2900      	cmp	r1, #0
 80022fe:	b090      	sub	sp, #64	; 0x40
 8002300:	4614      	mov	r4, r2
 8002302:	461d      	mov	r5, r3
 8002304:	da07      	bge.n	8002316 <__swhatbuf_r+0x22>
 8002306:	2300      	movs	r3, #0
 8002308:	602b      	str	r3, [r5, #0]
 800230a:	89b3      	ldrh	r3, [r6, #12]
 800230c:	061a      	lsls	r2, r3, #24
 800230e:	d410      	bmi.n	8002332 <__swhatbuf_r+0x3e>
 8002310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002314:	e00e      	b.n	8002334 <__swhatbuf_r+0x40>
 8002316:	aa01      	add	r2, sp, #4
 8002318:	f000 fc48 	bl	8002bac <_fstat_r>
 800231c:	2800      	cmp	r0, #0
 800231e:	dbf2      	blt.n	8002306 <__swhatbuf_r+0x12>
 8002320:	9a02      	ldr	r2, [sp, #8]
 8002322:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002326:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800232a:	425a      	negs	r2, r3
 800232c:	415a      	adcs	r2, r3
 800232e:	602a      	str	r2, [r5, #0]
 8002330:	e7ee      	b.n	8002310 <__swhatbuf_r+0x1c>
 8002332:	2340      	movs	r3, #64	; 0x40
 8002334:	2000      	movs	r0, #0
 8002336:	6023      	str	r3, [r4, #0]
 8002338:	b010      	add	sp, #64	; 0x40
 800233a:	bd70      	pop	{r4, r5, r6, pc}

0800233c <__smakebuf_r>:
 800233c:	898b      	ldrh	r3, [r1, #12]
 800233e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002340:	079d      	lsls	r5, r3, #30
 8002342:	4606      	mov	r6, r0
 8002344:	460c      	mov	r4, r1
 8002346:	d507      	bpl.n	8002358 <__smakebuf_r+0x1c>
 8002348:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800234c:	6023      	str	r3, [r4, #0]
 800234e:	6123      	str	r3, [r4, #16]
 8002350:	2301      	movs	r3, #1
 8002352:	6163      	str	r3, [r4, #20]
 8002354:	b002      	add	sp, #8
 8002356:	bd70      	pop	{r4, r5, r6, pc}
 8002358:	ab01      	add	r3, sp, #4
 800235a:	466a      	mov	r2, sp
 800235c:	f7ff ffca 	bl	80022f4 <__swhatbuf_r>
 8002360:	9900      	ldr	r1, [sp, #0]
 8002362:	4605      	mov	r5, r0
 8002364:	4630      	mov	r0, r6
 8002366:	f000 f877 	bl	8002458 <_malloc_r>
 800236a:	b948      	cbnz	r0, 8002380 <__smakebuf_r+0x44>
 800236c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002370:	059a      	lsls	r2, r3, #22
 8002372:	d4ef      	bmi.n	8002354 <__smakebuf_r+0x18>
 8002374:	f023 0303 	bic.w	r3, r3, #3
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	81a3      	strh	r3, [r4, #12]
 800237e:	e7e3      	b.n	8002348 <__smakebuf_r+0xc>
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <__smakebuf_r+0x7c>)
 8002382:	62b3      	str	r3, [r6, #40]	; 0x28
 8002384:	89a3      	ldrh	r3, [r4, #12]
 8002386:	6020      	str	r0, [r4, #0]
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	9b00      	ldr	r3, [sp, #0]
 8002390:	6163      	str	r3, [r4, #20]
 8002392:	9b01      	ldr	r3, [sp, #4]
 8002394:	6120      	str	r0, [r4, #16]
 8002396:	b15b      	cbz	r3, 80023b0 <__smakebuf_r+0x74>
 8002398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800239c:	4630      	mov	r0, r6
 800239e:	f000 fc17 	bl	8002bd0 <_isatty_r>
 80023a2:	b128      	cbz	r0, 80023b0 <__smakebuf_r+0x74>
 80023a4:	89a3      	ldrh	r3, [r4, #12]
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	81a3      	strh	r3, [r4, #12]
 80023b0:	89a3      	ldrh	r3, [r4, #12]
 80023b2:	431d      	orrs	r5, r3
 80023b4:	81a5      	strh	r5, [r4, #12]
 80023b6:	e7cd      	b.n	8002354 <__smakebuf_r+0x18>
 80023b8:	08002161 	.word	0x08002161

080023bc <_free_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4605      	mov	r5, r0
 80023c0:	2900      	cmp	r1, #0
 80023c2:	d045      	beq.n	8002450 <_free_r+0x94>
 80023c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023c8:	1f0c      	subs	r4, r1, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bfb8      	it	lt
 80023ce:	18e4      	addlt	r4, r4, r3
 80023d0:	f000 fc20 	bl	8002c14 <__malloc_lock>
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <_free_r+0x98>)
 80023d6:	6813      	ldr	r3, [r2, #0]
 80023d8:	4610      	mov	r0, r2
 80023da:	b933      	cbnz	r3, 80023ea <_free_r+0x2e>
 80023dc:	6063      	str	r3, [r4, #4]
 80023de:	6014      	str	r4, [r2, #0]
 80023e0:	4628      	mov	r0, r5
 80023e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023e6:	f000 bc16 	b.w	8002c16 <__malloc_unlock>
 80023ea:	42a3      	cmp	r3, r4
 80023ec:	d90c      	bls.n	8002408 <_free_r+0x4c>
 80023ee:	6821      	ldr	r1, [r4, #0]
 80023f0:	1862      	adds	r2, r4, r1
 80023f2:	4293      	cmp	r3, r2
 80023f4:	bf04      	itt	eq
 80023f6:	681a      	ldreq	r2, [r3, #0]
 80023f8:	685b      	ldreq	r3, [r3, #4]
 80023fa:	6063      	str	r3, [r4, #4]
 80023fc:	bf04      	itt	eq
 80023fe:	1852      	addeq	r2, r2, r1
 8002400:	6022      	streq	r2, [r4, #0]
 8002402:	6004      	str	r4, [r0, #0]
 8002404:	e7ec      	b.n	80023e0 <_free_r+0x24>
 8002406:	4613      	mov	r3, r2
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	b10a      	cbz	r2, 8002410 <_free_r+0x54>
 800240c:	42a2      	cmp	r2, r4
 800240e:	d9fa      	bls.n	8002406 <_free_r+0x4a>
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	1858      	adds	r0, r3, r1
 8002414:	42a0      	cmp	r0, r4
 8002416:	d10b      	bne.n	8002430 <_free_r+0x74>
 8002418:	6820      	ldr	r0, [r4, #0]
 800241a:	4401      	add	r1, r0
 800241c:	1858      	adds	r0, r3, r1
 800241e:	4282      	cmp	r2, r0
 8002420:	6019      	str	r1, [r3, #0]
 8002422:	d1dd      	bne.n	80023e0 <_free_r+0x24>
 8002424:	6810      	ldr	r0, [r2, #0]
 8002426:	6852      	ldr	r2, [r2, #4]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	4401      	add	r1, r0
 800242c:	6019      	str	r1, [r3, #0]
 800242e:	e7d7      	b.n	80023e0 <_free_r+0x24>
 8002430:	d902      	bls.n	8002438 <_free_r+0x7c>
 8002432:	230c      	movs	r3, #12
 8002434:	602b      	str	r3, [r5, #0]
 8002436:	e7d3      	b.n	80023e0 <_free_r+0x24>
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	1821      	adds	r1, r4, r0
 800243c:	428a      	cmp	r2, r1
 800243e:	bf04      	itt	eq
 8002440:	6811      	ldreq	r1, [r2, #0]
 8002442:	6852      	ldreq	r2, [r2, #4]
 8002444:	6062      	str	r2, [r4, #4]
 8002446:	bf04      	itt	eq
 8002448:	1809      	addeq	r1, r1, r0
 800244a:	6021      	streq	r1, [r4, #0]
 800244c:	605c      	str	r4, [r3, #4]
 800244e:	e7c7      	b.n	80023e0 <_free_r+0x24>
 8002450:	bd38      	pop	{r3, r4, r5, pc}
 8002452:	bf00      	nop
 8002454:	20000094 	.word	0x20000094

08002458 <_malloc_r>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	1ccd      	adds	r5, r1, #3
 800245c:	f025 0503 	bic.w	r5, r5, #3
 8002460:	3508      	adds	r5, #8
 8002462:	2d0c      	cmp	r5, #12
 8002464:	bf38      	it	cc
 8002466:	250c      	movcc	r5, #12
 8002468:	2d00      	cmp	r5, #0
 800246a:	4606      	mov	r6, r0
 800246c:	db01      	blt.n	8002472 <_malloc_r+0x1a>
 800246e:	42a9      	cmp	r1, r5
 8002470:	d903      	bls.n	800247a <_malloc_r+0x22>
 8002472:	230c      	movs	r3, #12
 8002474:	6033      	str	r3, [r6, #0]
 8002476:	2000      	movs	r0, #0
 8002478:	bd70      	pop	{r4, r5, r6, pc}
 800247a:	f000 fbcb 	bl	8002c14 <__malloc_lock>
 800247e:	4a23      	ldr	r2, [pc, #140]	; (800250c <_malloc_r+0xb4>)
 8002480:	6814      	ldr	r4, [r2, #0]
 8002482:	4621      	mov	r1, r4
 8002484:	b991      	cbnz	r1, 80024ac <_malloc_r+0x54>
 8002486:	4c22      	ldr	r4, [pc, #136]	; (8002510 <_malloc_r+0xb8>)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	b91b      	cbnz	r3, 8002494 <_malloc_r+0x3c>
 800248c:	4630      	mov	r0, r6
 800248e:	f000 fb17 	bl	8002ac0 <_sbrk_r>
 8002492:	6020      	str	r0, [r4, #0]
 8002494:	4629      	mov	r1, r5
 8002496:	4630      	mov	r0, r6
 8002498:	f000 fb12 	bl	8002ac0 <_sbrk_r>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d126      	bne.n	80024ee <_malloc_r+0x96>
 80024a0:	230c      	movs	r3, #12
 80024a2:	6033      	str	r3, [r6, #0]
 80024a4:	4630      	mov	r0, r6
 80024a6:	f000 fbb6 	bl	8002c16 <__malloc_unlock>
 80024aa:	e7e4      	b.n	8002476 <_malloc_r+0x1e>
 80024ac:	680b      	ldr	r3, [r1, #0]
 80024ae:	1b5b      	subs	r3, r3, r5
 80024b0:	d41a      	bmi.n	80024e8 <_malloc_r+0x90>
 80024b2:	2b0b      	cmp	r3, #11
 80024b4:	d90f      	bls.n	80024d6 <_malloc_r+0x7e>
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	50cd      	str	r5, [r1, r3]
 80024ba:	18cc      	adds	r4, r1, r3
 80024bc:	4630      	mov	r0, r6
 80024be:	f000 fbaa 	bl	8002c16 <__malloc_unlock>
 80024c2:	f104 000b 	add.w	r0, r4, #11
 80024c6:	1d23      	adds	r3, r4, #4
 80024c8:	f020 0007 	bic.w	r0, r0, #7
 80024cc:	1ac3      	subs	r3, r0, r3
 80024ce:	d01b      	beq.n	8002508 <_malloc_r+0xb0>
 80024d0:	425a      	negs	r2, r3
 80024d2:	50e2      	str	r2, [r4, r3]
 80024d4:	bd70      	pop	{r4, r5, r6, pc}
 80024d6:	428c      	cmp	r4, r1
 80024d8:	bf0d      	iteet	eq
 80024da:	6863      	ldreq	r3, [r4, #4]
 80024dc:	684b      	ldrne	r3, [r1, #4]
 80024de:	6063      	strne	r3, [r4, #4]
 80024e0:	6013      	streq	r3, [r2, #0]
 80024e2:	bf18      	it	ne
 80024e4:	460c      	movne	r4, r1
 80024e6:	e7e9      	b.n	80024bc <_malloc_r+0x64>
 80024e8:	460c      	mov	r4, r1
 80024ea:	6849      	ldr	r1, [r1, #4]
 80024ec:	e7ca      	b.n	8002484 <_malloc_r+0x2c>
 80024ee:	1cc4      	adds	r4, r0, #3
 80024f0:	f024 0403 	bic.w	r4, r4, #3
 80024f4:	42a0      	cmp	r0, r4
 80024f6:	d005      	beq.n	8002504 <_malloc_r+0xac>
 80024f8:	1a21      	subs	r1, r4, r0
 80024fa:	4630      	mov	r0, r6
 80024fc:	f000 fae0 	bl	8002ac0 <_sbrk_r>
 8002500:	3001      	adds	r0, #1
 8002502:	d0cd      	beq.n	80024a0 <_malloc_r+0x48>
 8002504:	6025      	str	r5, [r4, #0]
 8002506:	e7d9      	b.n	80024bc <_malloc_r+0x64>
 8002508:	bd70      	pop	{r4, r5, r6, pc}
 800250a:	bf00      	nop
 800250c:	20000094 	.word	0x20000094
 8002510:	20000098 	.word	0x20000098

08002514 <__sfputc_r>:
 8002514:	6893      	ldr	r3, [r2, #8]
 8002516:	3b01      	subs	r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	b410      	push	{r4}
 800251c:	6093      	str	r3, [r2, #8]
 800251e:	da09      	bge.n	8002534 <__sfputc_r+0x20>
 8002520:	6994      	ldr	r4, [r2, #24]
 8002522:	42a3      	cmp	r3, r4
 8002524:	db02      	blt.n	800252c <__sfputc_r+0x18>
 8002526:	b2cb      	uxtb	r3, r1
 8002528:	2b0a      	cmp	r3, #10
 800252a:	d103      	bne.n	8002534 <__sfputc_r+0x20>
 800252c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002530:	f7ff bca4 	b.w	8001e7c <__swbuf_r>
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	1c58      	adds	r0, r3, #1
 8002538:	6010      	str	r0, [r2, #0]
 800253a:	7019      	strb	r1, [r3, #0]
 800253c:	b2c8      	uxtb	r0, r1
 800253e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002542:	4770      	bx	lr

08002544 <__sfputs_r>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	4606      	mov	r6, r0
 8002548:	460f      	mov	r7, r1
 800254a:	4614      	mov	r4, r2
 800254c:	18d5      	adds	r5, r2, r3
 800254e:	42ac      	cmp	r4, r5
 8002550:	d101      	bne.n	8002556 <__sfputs_r+0x12>
 8002552:	2000      	movs	r0, #0
 8002554:	e007      	b.n	8002566 <__sfputs_r+0x22>
 8002556:	463a      	mov	r2, r7
 8002558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800255c:	4630      	mov	r0, r6
 800255e:	f7ff ffd9 	bl	8002514 <__sfputc_r>
 8002562:	1c43      	adds	r3, r0, #1
 8002564:	d1f3      	bne.n	800254e <__sfputs_r+0xa>
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002568 <_vfiprintf_r>:
 8002568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256c:	b09d      	sub	sp, #116	; 0x74
 800256e:	460c      	mov	r4, r1
 8002570:	4617      	mov	r7, r2
 8002572:	9303      	str	r3, [sp, #12]
 8002574:	4606      	mov	r6, r0
 8002576:	b118      	cbz	r0, 8002580 <_vfiprintf_r+0x18>
 8002578:	6983      	ldr	r3, [r0, #24]
 800257a:	b90b      	cbnz	r3, 8002580 <_vfiprintf_r+0x18>
 800257c:	f7ff fe30 	bl	80021e0 <__sinit>
 8002580:	4b7c      	ldr	r3, [pc, #496]	; (8002774 <_vfiprintf_r+0x20c>)
 8002582:	429c      	cmp	r4, r3
 8002584:	d157      	bne.n	8002636 <_vfiprintf_r+0xce>
 8002586:	6874      	ldr	r4, [r6, #4]
 8002588:	89a3      	ldrh	r3, [r4, #12]
 800258a:	0718      	lsls	r0, r3, #28
 800258c:	d55d      	bpl.n	800264a <_vfiprintf_r+0xe2>
 800258e:	6923      	ldr	r3, [r4, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05a      	beq.n	800264a <_vfiprintf_r+0xe2>
 8002594:	2300      	movs	r3, #0
 8002596:	9309      	str	r3, [sp, #36]	; 0x24
 8002598:	2320      	movs	r3, #32
 800259a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800259e:	2330      	movs	r3, #48	; 0x30
 80025a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025a4:	f04f 0b01 	mov.w	fp, #1
 80025a8:	46b8      	mov	r8, r7
 80025aa:	4645      	mov	r5, r8
 80025ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d155      	bne.n	8002660 <_vfiprintf_r+0xf8>
 80025b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80025b8:	d00b      	beq.n	80025d2 <_vfiprintf_r+0x6a>
 80025ba:	4653      	mov	r3, sl
 80025bc:	463a      	mov	r2, r7
 80025be:	4621      	mov	r1, r4
 80025c0:	4630      	mov	r0, r6
 80025c2:	f7ff ffbf 	bl	8002544 <__sfputs_r>
 80025c6:	3001      	adds	r0, #1
 80025c8:	f000 80c4 	beq.w	8002754 <_vfiprintf_r+0x1ec>
 80025cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ce:	4453      	add	r3, sl
 80025d0:	9309      	str	r3, [sp, #36]	; 0x24
 80025d2:	f898 3000 	ldrb.w	r3, [r8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80bc 	beq.w	8002754 <_vfiprintf_r+0x1ec>
 80025dc:	2300      	movs	r3, #0
 80025de:	f04f 32ff 	mov.w	r2, #4294967295
 80025e2:	9304      	str	r3, [sp, #16]
 80025e4:	9307      	str	r3, [sp, #28]
 80025e6:	9205      	str	r2, [sp, #20]
 80025e8:	9306      	str	r3, [sp, #24]
 80025ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025ee:	931a      	str	r3, [sp, #104]	; 0x68
 80025f0:	2205      	movs	r2, #5
 80025f2:	7829      	ldrb	r1, [r5, #0]
 80025f4:	4860      	ldr	r0, [pc, #384]	; (8002778 <_vfiprintf_r+0x210>)
 80025f6:	f7fd fdeb 	bl	80001d0 <memchr>
 80025fa:	f105 0801 	add.w	r8, r5, #1
 80025fe:	9b04      	ldr	r3, [sp, #16]
 8002600:	2800      	cmp	r0, #0
 8002602:	d131      	bne.n	8002668 <_vfiprintf_r+0x100>
 8002604:	06d9      	lsls	r1, r3, #27
 8002606:	bf44      	itt	mi
 8002608:	2220      	movmi	r2, #32
 800260a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800260e:	071a      	lsls	r2, r3, #28
 8002610:	bf44      	itt	mi
 8002612:	222b      	movmi	r2, #43	; 0x2b
 8002614:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002618:	782a      	ldrb	r2, [r5, #0]
 800261a:	2a2a      	cmp	r2, #42	; 0x2a
 800261c:	d02c      	beq.n	8002678 <_vfiprintf_r+0x110>
 800261e:	9a07      	ldr	r2, [sp, #28]
 8002620:	2100      	movs	r1, #0
 8002622:	200a      	movs	r0, #10
 8002624:	46a8      	mov	r8, r5
 8002626:	3501      	adds	r5, #1
 8002628:	f898 3000 	ldrb.w	r3, [r8]
 800262c:	3b30      	subs	r3, #48	; 0x30
 800262e:	2b09      	cmp	r3, #9
 8002630:	d96d      	bls.n	800270e <_vfiprintf_r+0x1a6>
 8002632:	b371      	cbz	r1, 8002692 <_vfiprintf_r+0x12a>
 8002634:	e026      	b.n	8002684 <_vfiprintf_r+0x11c>
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <_vfiprintf_r+0x214>)
 8002638:	429c      	cmp	r4, r3
 800263a:	d101      	bne.n	8002640 <_vfiprintf_r+0xd8>
 800263c:	68b4      	ldr	r4, [r6, #8]
 800263e:	e7a3      	b.n	8002588 <_vfiprintf_r+0x20>
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <_vfiprintf_r+0x218>)
 8002642:	429c      	cmp	r4, r3
 8002644:	bf08      	it	eq
 8002646:	68f4      	ldreq	r4, [r6, #12]
 8002648:	e79e      	b.n	8002588 <_vfiprintf_r+0x20>
 800264a:	4621      	mov	r1, r4
 800264c:	4630      	mov	r0, r6
 800264e:	f7ff fc67 	bl	8001f20 <__swsetup_r>
 8002652:	2800      	cmp	r0, #0
 8002654:	d09e      	beq.n	8002594 <_vfiprintf_r+0x2c>
 8002656:	f04f 30ff 	mov.w	r0, #4294967295
 800265a:	b01d      	add	sp, #116	; 0x74
 800265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002660:	2b25      	cmp	r3, #37	; 0x25
 8002662:	d0a7      	beq.n	80025b4 <_vfiprintf_r+0x4c>
 8002664:	46a8      	mov	r8, r5
 8002666:	e7a0      	b.n	80025aa <_vfiprintf_r+0x42>
 8002668:	4a43      	ldr	r2, [pc, #268]	; (8002778 <_vfiprintf_r+0x210>)
 800266a:	1a80      	subs	r0, r0, r2
 800266c:	fa0b f000 	lsl.w	r0, fp, r0
 8002670:	4318      	orrs	r0, r3
 8002672:	9004      	str	r0, [sp, #16]
 8002674:	4645      	mov	r5, r8
 8002676:	e7bb      	b.n	80025f0 <_vfiprintf_r+0x88>
 8002678:	9a03      	ldr	r2, [sp, #12]
 800267a:	1d11      	adds	r1, r2, #4
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	9103      	str	r1, [sp, #12]
 8002680:	2a00      	cmp	r2, #0
 8002682:	db01      	blt.n	8002688 <_vfiprintf_r+0x120>
 8002684:	9207      	str	r2, [sp, #28]
 8002686:	e004      	b.n	8002692 <_vfiprintf_r+0x12a>
 8002688:	4252      	negs	r2, r2
 800268a:	f043 0302 	orr.w	r3, r3, #2
 800268e:	9207      	str	r2, [sp, #28]
 8002690:	9304      	str	r3, [sp, #16]
 8002692:	f898 3000 	ldrb.w	r3, [r8]
 8002696:	2b2e      	cmp	r3, #46	; 0x2e
 8002698:	d110      	bne.n	80026bc <_vfiprintf_r+0x154>
 800269a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800269e:	2b2a      	cmp	r3, #42	; 0x2a
 80026a0:	f108 0101 	add.w	r1, r8, #1
 80026a4:	d137      	bne.n	8002716 <_vfiprintf_r+0x1ae>
 80026a6:	9b03      	ldr	r3, [sp, #12]
 80026a8:	1d1a      	adds	r2, r3, #4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	9203      	str	r2, [sp, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bfb8      	it	lt
 80026b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80026b6:	f108 0802 	add.w	r8, r8, #2
 80026ba:	9305      	str	r3, [sp, #20]
 80026bc:	4d31      	ldr	r5, [pc, #196]	; (8002784 <_vfiprintf_r+0x21c>)
 80026be:	f898 1000 	ldrb.w	r1, [r8]
 80026c2:	2203      	movs	r2, #3
 80026c4:	4628      	mov	r0, r5
 80026c6:	f7fd fd83 	bl	80001d0 <memchr>
 80026ca:	b140      	cbz	r0, 80026de <_vfiprintf_r+0x176>
 80026cc:	2340      	movs	r3, #64	; 0x40
 80026ce:	1b40      	subs	r0, r0, r5
 80026d0:	fa03 f000 	lsl.w	r0, r3, r0
 80026d4:	9b04      	ldr	r3, [sp, #16]
 80026d6:	4303      	orrs	r3, r0
 80026d8:	9304      	str	r3, [sp, #16]
 80026da:	f108 0801 	add.w	r8, r8, #1
 80026de:	f898 1000 	ldrb.w	r1, [r8]
 80026e2:	4829      	ldr	r0, [pc, #164]	; (8002788 <_vfiprintf_r+0x220>)
 80026e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026e8:	2206      	movs	r2, #6
 80026ea:	f108 0701 	add.w	r7, r8, #1
 80026ee:	f7fd fd6f 	bl	80001d0 <memchr>
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d034      	beq.n	8002760 <_vfiprintf_r+0x1f8>
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <_vfiprintf_r+0x224>)
 80026f8:	bb03      	cbnz	r3, 800273c <_vfiprintf_r+0x1d4>
 80026fa:	9b03      	ldr	r3, [sp, #12]
 80026fc:	3307      	adds	r3, #7
 80026fe:	f023 0307 	bic.w	r3, r3, #7
 8002702:	3308      	adds	r3, #8
 8002704:	9303      	str	r3, [sp, #12]
 8002706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002708:	444b      	add	r3, r9
 800270a:	9309      	str	r3, [sp, #36]	; 0x24
 800270c:	e74c      	b.n	80025a8 <_vfiprintf_r+0x40>
 800270e:	fb00 3202 	mla	r2, r0, r2, r3
 8002712:	2101      	movs	r1, #1
 8002714:	e786      	b.n	8002624 <_vfiprintf_r+0xbc>
 8002716:	2300      	movs	r3, #0
 8002718:	9305      	str	r3, [sp, #20]
 800271a:	4618      	mov	r0, r3
 800271c:	250a      	movs	r5, #10
 800271e:	4688      	mov	r8, r1
 8002720:	3101      	adds	r1, #1
 8002722:	f898 2000 	ldrb.w	r2, [r8]
 8002726:	3a30      	subs	r2, #48	; 0x30
 8002728:	2a09      	cmp	r2, #9
 800272a:	d903      	bls.n	8002734 <_vfiprintf_r+0x1cc>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0c5      	beq.n	80026bc <_vfiprintf_r+0x154>
 8002730:	9005      	str	r0, [sp, #20]
 8002732:	e7c3      	b.n	80026bc <_vfiprintf_r+0x154>
 8002734:	fb05 2000 	mla	r0, r5, r0, r2
 8002738:	2301      	movs	r3, #1
 800273a:	e7f0      	b.n	800271e <_vfiprintf_r+0x1b6>
 800273c:	ab03      	add	r3, sp, #12
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	4622      	mov	r2, r4
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_vfiprintf_r+0x228>)
 8002744:	a904      	add	r1, sp, #16
 8002746:	4630      	mov	r0, r6
 8002748:	f3af 8000 	nop.w
 800274c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002750:	4681      	mov	r9, r0
 8002752:	d1d8      	bne.n	8002706 <_vfiprintf_r+0x19e>
 8002754:	89a3      	ldrh	r3, [r4, #12]
 8002756:	065b      	lsls	r3, r3, #25
 8002758:	f53f af7d 	bmi.w	8002656 <_vfiprintf_r+0xee>
 800275c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800275e:	e77c      	b.n	800265a <_vfiprintf_r+0xf2>
 8002760:	ab03      	add	r3, sp, #12
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4622      	mov	r2, r4
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <_vfiprintf_r+0x228>)
 8002768:	a904      	add	r1, sp, #16
 800276a:	4630      	mov	r0, r6
 800276c:	f000 f888 	bl	8002880 <_printf_i>
 8002770:	e7ec      	b.n	800274c <_vfiprintf_r+0x1e4>
 8002772:	bf00      	nop
 8002774:	08002de0 	.word	0x08002de0
 8002778:	08002e20 	.word	0x08002e20
 800277c:	08002e00 	.word	0x08002e00
 8002780:	08002dc0 	.word	0x08002dc0
 8002784:	08002e26 	.word	0x08002e26
 8002788:	08002e2a 	.word	0x08002e2a
 800278c:	00000000 	.word	0x00000000
 8002790:	08002545 	.word	0x08002545

08002794 <_printf_common>:
 8002794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002798:	4691      	mov	r9, r2
 800279a:	461f      	mov	r7, r3
 800279c:	688a      	ldr	r2, [r1, #8]
 800279e:	690b      	ldr	r3, [r1, #16]
 80027a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bfb8      	it	lt
 80027a8:	4613      	movlt	r3, r2
 80027aa:	f8c9 3000 	str.w	r3, [r9]
 80027ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027b2:	4606      	mov	r6, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	b112      	cbz	r2, 80027be <_printf_common+0x2a>
 80027b8:	3301      	adds	r3, #1
 80027ba:	f8c9 3000 	str.w	r3, [r9]
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	0699      	lsls	r1, r3, #26
 80027c2:	bf42      	ittt	mi
 80027c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027c8:	3302      	addmi	r3, #2
 80027ca:	f8c9 3000 	strmi.w	r3, [r9]
 80027ce:	6825      	ldr	r5, [r4, #0]
 80027d0:	f015 0506 	ands.w	r5, r5, #6
 80027d4:	d107      	bne.n	80027e6 <_printf_common+0x52>
 80027d6:	f104 0a19 	add.w	sl, r4, #25
 80027da:	68e3      	ldr	r3, [r4, #12]
 80027dc:	f8d9 2000 	ldr.w	r2, [r9]
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	429d      	cmp	r5, r3
 80027e4:	db29      	blt.n	800283a <_printf_common+0xa6>
 80027e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80027ea:	6822      	ldr	r2, [r4, #0]
 80027ec:	3300      	adds	r3, #0
 80027ee:	bf18      	it	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	0692      	lsls	r2, r2, #26
 80027f4:	d42e      	bmi.n	8002854 <_printf_common+0xc0>
 80027f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027fa:	4639      	mov	r1, r7
 80027fc:	4630      	mov	r0, r6
 80027fe:	47c0      	blx	r8
 8002800:	3001      	adds	r0, #1
 8002802:	d021      	beq.n	8002848 <_printf_common+0xb4>
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	68e5      	ldr	r5, [r4, #12]
 8002808:	f8d9 2000 	ldr.w	r2, [r9]
 800280c:	f003 0306 	and.w	r3, r3, #6
 8002810:	2b04      	cmp	r3, #4
 8002812:	bf08      	it	eq
 8002814:	1aad      	subeq	r5, r5, r2
 8002816:	68a3      	ldr	r3, [r4, #8]
 8002818:	6922      	ldr	r2, [r4, #16]
 800281a:	bf0c      	ite	eq
 800281c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002820:	2500      	movne	r5, #0
 8002822:	4293      	cmp	r3, r2
 8002824:	bfc4      	itt	gt
 8002826:	1a9b      	subgt	r3, r3, r2
 8002828:	18ed      	addgt	r5, r5, r3
 800282a:	f04f 0900 	mov.w	r9, #0
 800282e:	341a      	adds	r4, #26
 8002830:	454d      	cmp	r5, r9
 8002832:	d11b      	bne.n	800286c <_printf_common+0xd8>
 8002834:	2000      	movs	r0, #0
 8002836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800283a:	2301      	movs	r3, #1
 800283c:	4652      	mov	r2, sl
 800283e:	4639      	mov	r1, r7
 8002840:	4630      	mov	r0, r6
 8002842:	47c0      	blx	r8
 8002844:	3001      	adds	r0, #1
 8002846:	d103      	bne.n	8002850 <_printf_common+0xbc>
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002850:	3501      	adds	r5, #1
 8002852:	e7c2      	b.n	80027da <_printf_common+0x46>
 8002854:	18e1      	adds	r1, r4, r3
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	2030      	movs	r0, #48	; 0x30
 800285a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800285e:	4422      	add	r2, r4
 8002860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002868:	3302      	adds	r3, #2
 800286a:	e7c4      	b.n	80027f6 <_printf_common+0x62>
 800286c:	2301      	movs	r3, #1
 800286e:	4622      	mov	r2, r4
 8002870:	4639      	mov	r1, r7
 8002872:	4630      	mov	r0, r6
 8002874:	47c0      	blx	r8
 8002876:	3001      	adds	r0, #1
 8002878:	d0e6      	beq.n	8002848 <_printf_common+0xb4>
 800287a:	f109 0901 	add.w	r9, r9, #1
 800287e:	e7d7      	b.n	8002830 <_printf_common+0x9c>

08002880 <_printf_i>:
 8002880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002884:	4617      	mov	r7, r2
 8002886:	7e0a      	ldrb	r2, [r1, #24]
 8002888:	b085      	sub	sp, #20
 800288a:	2a6e      	cmp	r2, #110	; 0x6e
 800288c:	4698      	mov	r8, r3
 800288e:	4606      	mov	r6, r0
 8002890:	460c      	mov	r4, r1
 8002892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002894:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002898:	f000 80bc 	beq.w	8002a14 <_printf_i+0x194>
 800289c:	d81a      	bhi.n	80028d4 <_printf_i+0x54>
 800289e:	2a63      	cmp	r2, #99	; 0x63
 80028a0:	d02e      	beq.n	8002900 <_printf_i+0x80>
 80028a2:	d80a      	bhi.n	80028ba <_printf_i+0x3a>
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	f000 80c8 	beq.w	8002a3a <_printf_i+0x1ba>
 80028aa:	2a58      	cmp	r2, #88	; 0x58
 80028ac:	f000 808a 	beq.w	80029c4 <_printf_i+0x144>
 80028b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80028b8:	e02a      	b.n	8002910 <_printf_i+0x90>
 80028ba:	2a64      	cmp	r2, #100	; 0x64
 80028bc:	d001      	beq.n	80028c2 <_printf_i+0x42>
 80028be:	2a69      	cmp	r2, #105	; 0x69
 80028c0:	d1f6      	bne.n	80028b0 <_printf_i+0x30>
 80028c2:	6821      	ldr	r1, [r4, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80028ca:	d023      	beq.n	8002914 <_printf_i+0x94>
 80028cc:	1d11      	adds	r1, r2, #4
 80028ce:	6019      	str	r1, [r3, #0]
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	e027      	b.n	8002924 <_printf_i+0xa4>
 80028d4:	2a73      	cmp	r2, #115	; 0x73
 80028d6:	f000 80b4 	beq.w	8002a42 <_printf_i+0x1c2>
 80028da:	d808      	bhi.n	80028ee <_printf_i+0x6e>
 80028dc:	2a6f      	cmp	r2, #111	; 0x6f
 80028de:	d02a      	beq.n	8002936 <_printf_i+0xb6>
 80028e0:	2a70      	cmp	r2, #112	; 0x70
 80028e2:	d1e5      	bne.n	80028b0 <_printf_i+0x30>
 80028e4:	680a      	ldr	r2, [r1, #0]
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	600a      	str	r2, [r1, #0]
 80028ec:	e003      	b.n	80028f6 <_printf_i+0x76>
 80028ee:	2a75      	cmp	r2, #117	; 0x75
 80028f0:	d021      	beq.n	8002936 <_printf_i+0xb6>
 80028f2:	2a78      	cmp	r2, #120	; 0x78
 80028f4:	d1dc      	bne.n	80028b0 <_printf_i+0x30>
 80028f6:	2278      	movs	r2, #120	; 0x78
 80028f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80028fc:	496e      	ldr	r1, [pc, #440]	; (8002ab8 <_printf_i+0x238>)
 80028fe:	e064      	b.n	80029ca <_printf_i+0x14a>
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002906:	1d11      	adds	r1, r2, #4
 8002908:	6019      	str	r1, [r3, #0]
 800290a:	6813      	ldr	r3, [r2, #0]
 800290c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002910:	2301      	movs	r3, #1
 8002912:	e0a3      	b.n	8002a5c <_printf_i+0x1dc>
 8002914:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002918:	f102 0104 	add.w	r1, r2, #4
 800291c:	6019      	str	r1, [r3, #0]
 800291e:	d0d7      	beq.n	80028d0 <_printf_i+0x50>
 8002920:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002924:	2b00      	cmp	r3, #0
 8002926:	da03      	bge.n	8002930 <_printf_i+0xb0>
 8002928:	222d      	movs	r2, #45	; 0x2d
 800292a:	425b      	negs	r3, r3
 800292c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002930:	4962      	ldr	r1, [pc, #392]	; (8002abc <_printf_i+0x23c>)
 8002932:	220a      	movs	r2, #10
 8002934:	e017      	b.n	8002966 <_printf_i+0xe6>
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800293e:	d003      	beq.n	8002948 <_printf_i+0xc8>
 8002940:	1d08      	adds	r0, r1, #4
 8002942:	6018      	str	r0, [r3, #0]
 8002944:	680b      	ldr	r3, [r1, #0]
 8002946:	e006      	b.n	8002956 <_printf_i+0xd6>
 8002948:	f010 0f40 	tst.w	r0, #64	; 0x40
 800294c:	f101 0004 	add.w	r0, r1, #4
 8002950:	6018      	str	r0, [r3, #0]
 8002952:	d0f7      	beq.n	8002944 <_printf_i+0xc4>
 8002954:	880b      	ldrh	r3, [r1, #0]
 8002956:	4959      	ldr	r1, [pc, #356]	; (8002abc <_printf_i+0x23c>)
 8002958:	2a6f      	cmp	r2, #111	; 0x6f
 800295a:	bf14      	ite	ne
 800295c:	220a      	movne	r2, #10
 800295e:	2208      	moveq	r2, #8
 8002960:	2000      	movs	r0, #0
 8002962:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002966:	6865      	ldr	r5, [r4, #4]
 8002968:	60a5      	str	r5, [r4, #8]
 800296a:	2d00      	cmp	r5, #0
 800296c:	f2c0 809c 	blt.w	8002aa8 <_printf_i+0x228>
 8002970:	6820      	ldr	r0, [r4, #0]
 8002972:	f020 0004 	bic.w	r0, r0, #4
 8002976:	6020      	str	r0, [r4, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d13f      	bne.n	80029fc <_printf_i+0x17c>
 800297c:	2d00      	cmp	r5, #0
 800297e:	f040 8095 	bne.w	8002aac <_printf_i+0x22c>
 8002982:	4675      	mov	r5, lr
 8002984:	2a08      	cmp	r2, #8
 8002986:	d10b      	bne.n	80029a0 <_printf_i+0x120>
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	07da      	lsls	r2, r3, #31
 800298c:	d508      	bpl.n	80029a0 <_printf_i+0x120>
 800298e:	6923      	ldr	r3, [r4, #16]
 8002990:	6862      	ldr	r2, [r4, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	bfde      	ittt	le
 8002996:	2330      	movle	r3, #48	; 0x30
 8002998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800299c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029a0:	ebae 0305 	sub.w	r3, lr, r5
 80029a4:	6123      	str	r3, [r4, #16]
 80029a6:	f8cd 8000 	str.w	r8, [sp]
 80029aa:	463b      	mov	r3, r7
 80029ac:	aa03      	add	r2, sp, #12
 80029ae:	4621      	mov	r1, r4
 80029b0:	4630      	mov	r0, r6
 80029b2:	f7ff feef 	bl	8002794 <_printf_common>
 80029b6:	3001      	adds	r0, #1
 80029b8:	d155      	bne.n	8002a66 <_printf_i+0x1e6>
 80029ba:	f04f 30ff 	mov.w	r0, #4294967295
 80029be:	b005      	add	sp, #20
 80029c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029c4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80029c8:	493c      	ldr	r1, [pc, #240]	; (8002abc <_printf_i+0x23c>)
 80029ca:	6822      	ldr	r2, [r4, #0]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80029d2:	f100 0504 	add.w	r5, r0, #4
 80029d6:	601d      	str	r5, [r3, #0]
 80029d8:	d001      	beq.n	80029de <_printf_i+0x15e>
 80029da:	6803      	ldr	r3, [r0, #0]
 80029dc:	e002      	b.n	80029e4 <_printf_i+0x164>
 80029de:	0655      	lsls	r5, r2, #25
 80029e0:	d5fb      	bpl.n	80029da <_printf_i+0x15a>
 80029e2:	8803      	ldrh	r3, [r0, #0]
 80029e4:	07d0      	lsls	r0, r2, #31
 80029e6:	bf44      	itt	mi
 80029e8:	f042 0220 	orrmi.w	r2, r2, #32
 80029ec:	6022      	strmi	r2, [r4, #0]
 80029ee:	b91b      	cbnz	r3, 80029f8 <_printf_i+0x178>
 80029f0:	6822      	ldr	r2, [r4, #0]
 80029f2:	f022 0220 	bic.w	r2, r2, #32
 80029f6:	6022      	str	r2, [r4, #0]
 80029f8:	2210      	movs	r2, #16
 80029fa:	e7b1      	b.n	8002960 <_printf_i+0xe0>
 80029fc:	4675      	mov	r5, lr
 80029fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8002a02:	fb02 3310 	mls	r3, r2, r0, r3
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d1f5      	bne.n	80029fe <_printf_i+0x17e>
 8002a12:	e7b7      	b.n	8002984 <_printf_i+0x104>
 8002a14:	6808      	ldr	r0, [r1, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	6949      	ldr	r1, [r1, #20]
 8002a1a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a1e:	d004      	beq.n	8002a2a <_printf_i+0x1aa>
 8002a20:	1d10      	adds	r0, r2, #4
 8002a22:	6018      	str	r0, [r3, #0]
 8002a24:	6813      	ldr	r3, [r2, #0]
 8002a26:	6019      	str	r1, [r3, #0]
 8002a28:	e007      	b.n	8002a3a <_printf_i+0x1ba>
 8002a2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a2e:	f102 0004 	add.w	r0, r2, #4
 8002a32:	6018      	str	r0, [r3, #0]
 8002a34:	6813      	ldr	r3, [r2, #0]
 8002a36:	d0f6      	beq.n	8002a26 <_printf_i+0x1a6>
 8002a38:	8019      	strh	r1, [r3, #0]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	6123      	str	r3, [r4, #16]
 8002a3e:	4675      	mov	r5, lr
 8002a40:	e7b1      	b.n	80029a6 <_printf_i+0x126>
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	1d11      	adds	r1, r2, #4
 8002a46:	6019      	str	r1, [r3, #0]
 8002a48:	6815      	ldr	r5, [r2, #0]
 8002a4a:	6862      	ldr	r2, [r4, #4]
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f7fd fbbe 	bl	80001d0 <memchr>
 8002a54:	b108      	cbz	r0, 8002a5a <_printf_i+0x1da>
 8002a56:	1b40      	subs	r0, r0, r5
 8002a58:	6060      	str	r0, [r4, #4]
 8002a5a:	6863      	ldr	r3, [r4, #4]
 8002a5c:	6123      	str	r3, [r4, #16]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a64:	e79f      	b.n	80029a6 <_printf_i+0x126>
 8002a66:	6923      	ldr	r3, [r4, #16]
 8002a68:	462a      	mov	r2, r5
 8002a6a:	4639      	mov	r1, r7
 8002a6c:	4630      	mov	r0, r6
 8002a6e:	47c0      	blx	r8
 8002a70:	3001      	adds	r0, #1
 8002a72:	d0a2      	beq.n	80029ba <_printf_i+0x13a>
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	079b      	lsls	r3, r3, #30
 8002a78:	d507      	bpl.n	8002a8a <_printf_i+0x20a>
 8002a7a:	2500      	movs	r5, #0
 8002a7c:	f104 0919 	add.w	r9, r4, #25
 8002a80:	68e3      	ldr	r3, [r4, #12]
 8002a82:	9a03      	ldr	r2, [sp, #12]
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	429d      	cmp	r5, r3
 8002a88:	db05      	blt.n	8002a96 <_printf_i+0x216>
 8002a8a:	68e0      	ldr	r0, [r4, #12]
 8002a8c:	9b03      	ldr	r3, [sp, #12]
 8002a8e:	4298      	cmp	r0, r3
 8002a90:	bfb8      	it	lt
 8002a92:	4618      	movlt	r0, r3
 8002a94:	e793      	b.n	80029be <_printf_i+0x13e>
 8002a96:	2301      	movs	r3, #1
 8002a98:	464a      	mov	r2, r9
 8002a9a:	4639      	mov	r1, r7
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	47c0      	blx	r8
 8002aa0:	3001      	adds	r0, #1
 8002aa2:	d08a      	beq.n	80029ba <_printf_i+0x13a>
 8002aa4:	3501      	adds	r5, #1
 8002aa6:	e7eb      	b.n	8002a80 <_printf_i+0x200>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1a7      	bne.n	80029fc <_printf_i+0x17c>
 8002aac:	780b      	ldrb	r3, [r1, #0]
 8002aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ab2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ab6:	e765      	b.n	8002984 <_printf_i+0x104>
 8002ab8:	08002e42 	.word	0x08002e42
 8002abc:	08002e31 	.word	0x08002e31

08002ac0 <_sbrk_r>:
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	4c06      	ldr	r4, [pc, #24]	; (8002adc <_sbrk_r+0x1c>)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	4605      	mov	r5, r0
 8002ac8:	4608      	mov	r0, r1
 8002aca:	6023      	str	r3, [r4, #0]
 8002acc:	f7fe fa30 	bl	8000f30 <_sbrk>
 8002ad0:	1c43      	adds	r3, r0, #1
 8002ad2:	d102      	bne.n	8002ada <_sbrk_r+0x1a>
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	b103      	cbz	r3, 8002ada <_sbrk_r+0x1a>
 8002ad8:	602b      	str	r3, [r5, #0]
 8002ada:	bd38      	pop	{r3, r4, r5, pc}
 8002adc:	200001b4 	.word	0x200001b4

08002ae0 <__sread>:
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae8:	f000 f896 	bl	8002c18 <_read_r>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	bfab      	itete	ge
 8002af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002af2:	89a3      	ldrhlt	r3, [r4, #12]
 8002af4:	181b      	addge	r3, r3, r0
 8002af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002afa:	bfac      	ite	ge
 8002afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002afe:	81a3      	strhlt	r3, [r4, #12]
 8002b00:	bd10      	pop	{r4, pc}

08002b02 <__swrite>:
 8002b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b06:	461f      	mov	r7, r3
 8002b08:	898b      	ldrh	r3, [r1, #12]
 8002b0a:	05db      	lsls	r3, r3, #23
 8002b0c:	4605      	mov	r5, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	4616      	mov	r6, r2
 8002b12:	d505      	bpl.n	8002b20 <__swrite+0x1e>
 8002b14:	2302      	movs	r3, #2
 8002b16:	2200      	movs	r2, #0
 8002b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b1c:	f000 f868 	bl	8002bf0 <_lseek_r>
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b2a:	81a3      	strh	r3, [r4, #12]
 8002b2c:	4632      	mov	r2, r6
 8002b2e:	463b      	mov	r3, r7
 8002b30:	4628      	mov	r0, r5
 8002b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b36:	f000 b817 	b.w	8002b68 <_write_r>

08002b3a <__sseek>:
 8002b3a:	b510      	push	{r4, lr}
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b42:	f000 f855 	bl	8002bf0 <_lseek_r>
 8002b46:	1c43      	adds	r3, r0, #1
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	bf15      	itete	ne
 8002b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b56:	81a3      	strheq	r3, [r4, #12]
 8002b58:	bf18      	it	ne
 8002b5a:	81a3      	strhne	r3, [r4, #12]
 8002b5c:	bd10      	pop	{r4, pc}

08002b5e <__sclose>:
 8002b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b62:	f000 b813 	b.w	8002b8c <_close_r>
	...

08002b68 <_write_r>:
 8002b68:	b538      	push	{r3, r4, r5, lr}
 8002b6a:	4c07      	ldr	r4, [pc, #28]	; (8002b88 <_write_r+0x20>)
 8002b6c:	4605      	mov	r5, r0
 8002b6e:	4608      	mov	r0, r1
 8002b70:	4611      	mov	r1, r2
 8002b72:	2200      	movs	r2, #0
 8002b74:	6022      	str	r2, [r4, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7fe f9c0 	bl	8000efc <_write>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d102      	bne.n	8002b86 <_write_r+0x1e>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	b103      	cbz	r3, 8002b86 <_write_r+0x1e>
 8002b84:	602b      	str	r3, [r5, #0]
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	200001b4 	.word	0x200001b4

08002b8c <_close_r>:
 8002b8c:	b538      	push	{r3, r4, r5, lr}
 8002b8e:	4c06      	ldr	r4, [pc, #24]	; (8002ba8 <_close_r+0x1c>)
 8002b90:	2300      	movs	r3, #0
 8002b92:	4605      	mov	r5, r0
 8002b94:	4608      	mov	r0, r1
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	f7fe f9e4 	bl	8000f64 <_close>
 8002b9c:	1c43      	adds	r3, r0, #1
 8002b9e:	d102      	bne.n	8002ba6 <_close_r+0x1a>
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	b103      	cbz	r3, 8002ba6 <_close_r+0x1a>
 8002ba4:	602b      	str	r3, [r5, #0]
 8002ba6:	bd38      	pop	{r3, r4, r5, pc}
 8002ba8:	200001b4 	.word	0x200001b4

08002bac <_fstat_r>:
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	4c07      	ldr	r4, [pc, #28]	; (8002bcc <_fstat_r+0x20>)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	4605      	mov	r5, r0
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	f7fe f9d6 	bl	8000f6a <_fstat>
 8002bbe:	1c43      	adds	r3, r0, #1
 8002bc0:	d102      	bne.n	8002bc8 <_fstat_r+0x1c>
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	b103      	cbz	r3, 8002bc8 <_fstat_r+0x1c>
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	bd38      	pop	{r3, r4, r5, pc}
 8002bca:	bf00      	nop
 8002bcc:	200001b4 	.word	0x200001b4

08002bd0 <_isatty_r>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
 8002bd2:	4c06      	ldr	r4, [pc, #24]	; (8002bec <_isatty_r+0x1c>)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	6023      	str	r3, [r4, #0]
 8002bdc:	f7fe f9ca 	bl	8000f74 <_isatty>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	d102      	bne.n	8002bea <_isatty_r+0x1a>
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	b103      	cbz	r3, 8002bea <_isatty_r+0x1a>
 8002be8:	602b      	str	r3, [r5, #0]
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	200001b4 	.word	0x200001b4

08002bf0 <_lseek_r>:
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	4c07      	ldr	r4, [pc, #28]	; (8002c10 <_lseek_r+0x20>)
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	4608      	mov	r0, r1
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	6022      	str	r2, [r4, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f7fe f9ba 	bl	8000f78 <_lseek>
 8002c04:	1c43      	adds	r3, r0, #1
 8002c06:	d102      	bne.n	8002c0e <_lseek_r+0x1e>
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	b103      	cbz	r3, 8002c0e <_lseek_r+0x1e>
 8002c0c:	602b      	str	r3, [r5, #0]
 8002c0e:	bd38      	pop	{r3, r4, r5, pc}
 8002c10:	200001b4 	.word	0x200001b4

08002c14 <__malloc_lock>:
 8002c14:	4770      	bx	lr

08002c16 <__malloc_unlock>:
 8002c16:	4770      	bx	lr

08002c18 <_read_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4c07      	ldr	r4, [pc, #28]	; (8002c38 <_read_r+0x20>)
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	4608      	mov	r0, r1
 8002c20:	4611      	mov	r1, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	6022      	str	r2, [r4, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7fe f95a 	bl	8000ee0 <_read>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_read_r+0x1e>
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_read_r+0x1e>
 8002c34:	602b      	str	r3, [r5, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	200001b4 	.word	0x200001b4

08002c3c <_init>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr

08002c48 <_fini>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr
